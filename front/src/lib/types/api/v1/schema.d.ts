/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/players/{id}/name": {
    /** 별명등록, 초회 이벤트 별명등록 */
    put: operations["setName"];
  };
  "/api/v1/members/modify": {
    /** 관리자정보 수정 */
    put: operations["modify"];
  };
  "/api/v1/inventory/update/inventory": {
    /** 플레이어 인벤토리 업데이트 */
    put: operations["updateInventory"];
  };
  "/api/v1/schools/createSchool": {
    /** 관리자 - 학교생성 */
    post: operations["createSchool"];
  };
  "/api/v1/profileInventory/addProfileInventory": {
    /** 아이템 구매, 획득 */
    post: operations["addProfileInventory"];
  };
  "/api/v1/playerLogs/batchPlayLog": {
    /** 게임결과 로그 일괄처리 */
    post: operations["batchPlayLog"];
  };
  "/api/v1/members/logout": {
    /** 로그아웃 */
    post: operations["logout"];
  };
  "/api/v1/members/login": {
    /** 로그인, accessToken, refreshToken 쿠키 생성됨 */
    post: operations["login"];
  };
  "/api/v1/members/admin/login": {
    /** 관리자 로그인, accessToken, refreshToken 쿠키 생성됨 */
    post: operations["adminLogin"];
  };
  "/api/v1/members/admin/checkPassword": {
    /** 관리자 비밀번호 확인 */
    post: operations["adminCheckPassword"];
  };
  "/api/v1/inventory/addInventory": {
    /** 아이템 구매, 획득 */
    post: operations["addInventory"];
  };
  "/api/v1/gameMaps/gameMap/test2": {
    /** 특정 게임 테스트용2 */
    post: operations["getGameMapTest2"];
  };
  "/api/v1/test/test": {
    /** 플레이어 인벤토리 조회 */
    get: operations["test"];
  };
  "/api/v1/programs": {
    /** 사업 조회 */
    get: operations["getPrograms"];
  };
  "/api/v1/profileInventory/myInventory": {
    /** 플레이어 인벤토리 조회 */
    get: operations["getMyInventory"];
  };
  "/api/v1/profile/profiles": {
    /** 전체 프로필아이콘 목록 조회 */
    get: operations["getProfiles"];
  };
  "/api/v1/playerLogs/highest": {
    /** 플레이어의 최고기록 로그 */
    get: operations["getHighestLog"];
  };
  "/api/v1/playerLogs/gamesLastLog/{gameMapId}": {
    /** 해당 게임의 마지막 로그 */
    get: operations["getGamesLastLog"];
  };
  "/api/v1/playerLogs/clearLog/{stage}": {
    /** 스테이지 클리어 로그 */
    get: operations["getClearLog"];
  };
  "/api/v1/members/me": {
    /** 내 정보 */
    get: operations["getMe"];
  };
  "/api/v1/members/adm/me": {
    /** 관리자 마이페이지 */
    get: operations["getAdminMe"];
  };
  "/api/v1/item/items": {
    /** 전체 아이템 목록 조회 */
    get: operations["getItems"];
  };
  "/api/v1/inventory/myInventory": {
    /** 플레이어 인벤토리 조회 */
    get: operations["getMyInventory_1"];
  };
  "/api/v1/gameMaps/gameMap/{stage}/{id}": {
    /** 특정 게임 맵 조회와 자격검증 */
    get: operations["getGameMap"];
  };
  "/api/v1/gameMaps/gameMap/{id}": {
    /** 특정 게임 맵 과 필요장비 조회 */
    get: operations["getGameMapWithItem"];
  };
  "/api/v1/gameMaps/gameMap/test/{gameInfo}": {
    /** 특정 게임 테스트용 */
    get: operations["getGameMapTest"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Empty: Record<string, never>;
    RsDataEmpty: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["Empty"];
    };
    SetNickNameRequestBody: {
      nickname: string;
    };
    PlayerDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      nickname: string;
      /** Format: int32 */
      exp: number;
      /** Format: int32 */
      gems: number;
    };
    RsDataSetNickNameResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["SetNickNameResponseBody"];
    };
    SetNickNameResponseBody: {
      item: components["schemas"]["PlayerDto"];
    };
    ModifyRequestBody: {
      newPassword?: string;
      realName: string;
      cellphoneNo: string;
      department: string;
      position: string;
      extensionNo: string;
    };
    MemberDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      username: string;
      name: string;
      cellphoneNo: string;
      authorities: string[];
      player: components["schemas"]["PlayerDto"];
    };
    ModifyResponseBody: {
      item: components["schemas"]["MemberDto"];
    };
    RsDataModifyResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["ModifyResponseBody"];
    };
    InventoryDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      updateDate: string;
      item: components["schemas"]["ItemDto"];
      isEquipped: boolean;
    };
    ItemDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      updateDate: string;
      /** Format: int64 */
      itemPartsId: number;
      name: string;
      /** Format: int32 */
      price: number;
      description: string;
      availableCommands: string;
      sourcePath: string;
    };
    UpdateInventoryRequestBody: {
      inventoryList: components["schemas"]["InventoryDto"][];
    };
    RsDataUpdateInventoryResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["UpdateInventoryResponseBody"];
    };
    UpdateInventoryResponseBody: {
      memberDto: components["schemas"]["MemberDto"];
    };
    CreateSchoolRequestBody: {
      name?: string;
      location?: string;
      phoneNo?: string;
    };
    CreateSchoolResponseBody: {
      schoolDto?: components["schemas"]["SchoolDto"];
    };
    RsDataCreateSchoolResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["CreateSchoolResponseBody"];
    };
    SchoolDto: {
      /** Format: int64 */
      id: number;
      name: string;
      location: string;
      phoneNo: string;
    };
    addProfileInventoryRequestBody: {
      /** Format: int64 */
      profileId: number;
    };
    AchievementDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      updateDate: string;
      name: string;
      description: string;
      logType: string;
      detail1: string;
      /** Format: int32 */
      detail2: number;
    };
    ProfileDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      updateDate: string;
      name: string;
      description: string;
      sourcePath: string;
      /** Format: int32 */
      price: number;
      achievement?: components["schemas"]["AchievementDto"];
    };
    ProfileInventoryDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      updateDate: string;
      profileIcon: components["schemas"]["ProfileDto"];
      isEquipped: boolean;
    };
    RsDataAddProfileInventoryResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["addProfileInventoryResponseBody"];
    };
    addProfileInventoryResponseBody: {
      profileInventoryDto: components["schemas"]["ProfileInventoryDto"];
    };
    BatchPlayLogRequestBody: {
      gameMapDto: components["schemas"]["GameMapDto"];
      result: string;
    };
    GameMapDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      stage: string;
      step: string;
      difficulty: string;
      /** Format: int32 */
      level: number;
      editorAutoComplete: string;
      editorMessage: string;
      clearGoal: string;
      cocosInfo: string;
      guideText: string;
      guideImage: string;
      commandGuide: string;
      /** Format: int32 */
      rewardExp: number;
      /** Format: int32 */
      rewardJewel: number;
      rewardItem?: components["schemas"]["ItemDto"];
    };
    LoginRequestBody: {
      /** Format: int32 */
      roleLevel: number;
      username: string;
      password: string;
    };
    LoginResponseBody: {
      item: components["schemas"]["MemberDto"];
    };
    RsDataLoginResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["LoginResponseBody"];
    };
    AdminLoginRequestBody: {
      username: string;
      password: string;
    };
    AdminCheckPasswordRequestBody: {
      password: string;
    };
    addInventoryRequestBody: {
      /** Format: int64 */
      itemId: number;
    };
    RsDataAddInventoryResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["addInventoryResponseBody"];
    };
    addInventoryResponseBody: {
      inventoryDto: components["schemas"]["InventoryDto"];
    };
    GameMapTest2RequestBody: {
      gameInfo: string;
      editorValue: string;
    };
    RsDataObject: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: Record<string, never>;
    };
    RsDataTestResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["TestResponseBody"];
    };
    TestResponseBody: {
      /** Format: int64 */
      id: number;
    };
    GetProgramsResponseBody: {
      itemPage: components["schemas"]["PageDtoProgramDto"];
    };
    PageDtoProgramDto: {
      /** Format: int64 */
      totalElementsCount: number;
      /** Format: int64 */
      pageElementsCount: number;
      /** Format: int64 */
      totalPagesCount: number;
      /** Format: int32 */
      number: number;
      content: components["schemas"]["ProgramDto"][];
    };
    ProgramDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      name: string;
      /** Format: date */
      startDate: string;
      /** Format: date */
      endDate: string;
      city: string;
      administrativeDistrict: string;
    };
    RsDataGetProgramsResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GetProgramsResponseBody"];
    };
    MyProfileInventoryResponseBody: {
      profileInventoryDtoList: components["schemas"]["ProfileInventoryDto"][];
    };
    RsDataMyProfileInventoryResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MyProfileInventoryResponseBody"];
    };
    ProfilesResponseBody: {
      profileDtoList: components["schemas"]["ProfileDto"][];
    };
    RsDataProfilesResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["ProfilesResponseBody"];
    };
    GamesHighestLogResponseBody: {
      playerLogDto?: components["schemas"]["PlayerLogDto"];
    };
    PlayerLogDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      logType: string;
      username: string;
      /** Format: int64 */
      gameMapId: number;
      gameMapStage: string;
      gameMapStep: string;
      gameMapDifficulty: string;
      /** Format: int32 */
      gameMapLevel: number;
      detailText?: string;
      /** Format: int32 */
      detailInt?: number;
    };
    RsDataGamesHighestLogResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GamesHighestLogResponseBody"];
    };
    GamesLastLogResponseBody: {
      playerLogDto?: components["schemas"]["PlayerLogDto"];
    };
    RsDataGamesLastLogResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GamesLastLogResponseBody"];
    };
    ClearLogResponseBody: {
      playerLogDtoList: components["schemas"]["PlayerLogDto"][];
    };
    RsDataClearLogResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["ClearLogResponseBody"];
    };
    MeResponseBody: {
      item: components["schemas"]["MemberDto"];
    };
    RsDataMeResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MeResponseBody"];
    };
    AdminMeResponseBody: {
      item: components["schemas"]["MemberProgramAdmDto"];
    };
    MemberProgramAdmDto: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createDate: string;
      /** Format: date-time */
      modifyDate: string;
      username: string;
      name: string;
      cellphoneNo: string;
      authorities: string[];
      department: string;
      position: string;
      extensionNo: string;
      responsibilities: components["schemas"]["ProgramDto"][];
    };
    RsDataAdminMeResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["AdminMeResponseBody"];
    };
    ItemsResponseBody: {
      itemDtoList: components["schemas"]["ItemDto"][];
    };
    RsDataItemsResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["ItemsResponseBody"];
    };
    MyInventoryResponseBody: {
      inventoryDto: components["schemas"]["InventoryDto"][];
    };
    RsDataMyInventoryResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["MyInventoryResponseBody"];
    };
    GameMapResponseBody: {
      gameMapDto?: components["schemas"]["GameMapDto"];
    };
    RsDataGameMapResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GameMapResponseBody"];
    };
    GameMapResponseBodyWithRequireItem: {
      gameMapDto: components["schemas"]["GameMapDto"];
      requirePartsDto: components["schemas"]["RequirePartsDto"][];
    };
    RequirePartsDto: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      itemPartsId: number;
    };
    RsDataGameMapResponseBodyWithRequireItem: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GameMapResponseBodyWithRequireItem"];
    };
    GameMapTestResponseBody: {
      gameMapDto?: components["schemas"]["GameMapDto"];
    };
    RsDataGameMapTestResponseBody: {
      resultCode: string;
      /** Format: int32 */
      statusCode: number;
      msg: string;
      data: components["schemas"]["GameMapTestResponseBody"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** 별명등록, 초회 이벤트 별명등록 */
  setName: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetNickNameRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataSetNickNameResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 관리자정보 수정 */
  modify: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataModifyResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 플레이어 인벤토리 업데이트 */
  updateInventory: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["UpdateInventoryRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataUpdateInventoryResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 관리자 - 학교생성 */
  createSchool: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSchoolRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataCreateSchoolResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 아이템 구매, 획득 */
  addProfileInventory: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["addProfileInventoryRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataAddProfileInventoryResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 게임결과 로그 일괄처리 */
  batchPlayLog: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["BatchPlayLogRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로그아웃 */
  logout: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 로그인, accessToken, refreshToken 쿠키 생성됨 */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataLoginResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 관리자 로그인, accessToken, refreshToken 쿠키 생성됨 */
  adminLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminLoginRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataLoginResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 관리자 비밀번호 확인 */
  adminCheckPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminCheckPasswordRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataLoginResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 아이템 구매, 획득 */
  addInventory: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["addInventoryRequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataAddInventoryResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 특정 게임 테스트용2 */
  getGameMapTest2: {
    requestBody: {
      content: {
        "*/*": components["schemas"]["GameMapTest2RequestBody"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataObject"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 플레이어 인벤토리 조회 */
  test: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataTestResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 사업 조회 */
  getPrograms: {
    parameters: {
      query: {
        page: number;
        kw: string;
        kwType: "ALL" | "TITLE" | "REGION" | "INCHARGENAME" | "AGENCY";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGetProgramsResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 플레이어 인벤토리 조회 */
  getMyInventory: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataMyProfileInventoryResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 전체 프로필아이콘 목록 조회 */
  getProfiles: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataProfilesResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 플레이어의 최고기록 로그 */
  getHighestLog: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGamesHighestLogResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 해당 게임의 마지막 로그 */
  getGamesLastLog: {
    parameters: {
      path: {
        gameMapId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGamesLastLogResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 스테이지 클리어 로그 */
  getClearLog: {
    parameters: {
      path: {
        stage: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataClearLogResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 내 정보 */
  getMe: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataMeResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 관리자 마이페이지 */
  getAdminMe: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataAdminMeResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 전체 아이템 목록 조회 */
  getItems: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataItemsResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 플레이어 인벤토리 조회 */
  getMyInventory_1: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataMyInventoryResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 특정 게임 맵 조회와 자격검증 */
  getGameMap: {
    parameters: {
      path: {
        stage: string;
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGameMapResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 특정 게임 맵 과 필요장비 조회 */
  getGameMapWithItem: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGameMapResponseBodyWithRequireItem"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
  /** 특정 게임 테스트용 */
  getGameMapTest: {
    parameters: {
      path: {
        gameInfo: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RsDataGameMapTestResponseBody"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["RsDataEmpty"];
        };
      };
    };
  };
}
