{"version":3,"sources":["assets/scripts/Controller.js","assets/scripts/Env.js","assets/scripts/Object/GameDummy.js","assets/scripts/Object/GameItem.js","assets/scripts/GameLogic/GameManager.js","assets/scripts/Object/GameRaiser.js","assets/scripts/Object/GameTrap.js","assets/scripts/Object/Player.js"],"names":["Controller","cc","Class","statics","_instance","getInstance","init","properties","initJson","streamJson","loadIndex","gameStatus","getInitStageData","this","stage","getInitPlayerData","player","getCommandLine","id","data","length","console","log","getCommandLength","ReceiveJson","json","arguments","undefined","GetProgressId","SetProgressId","GetStatus","SetStatus","status","module","exports","window","SendInitData","SendStreamData","TestFunc","OnClickPlay","Env","OFFSET_X","OFFSET_Y","PLAYER_RADIO","DUMMY_TYPE_FOOD","DUMMY_TYPE_ROCKET_PARTS","DUMMY_TYPE_SOLID_OIL","DUMMY_TYPE_OIL","DUMMY_TYPE_ENGINE","DUMMY_TYPE_O2","DUMMY_TYPE_HEALPACK","DUMMY_TYPE_BOMB","DUMMY_RAISER_SWITCH","DUMMY_TYPE_RAISER_START","DUMMY_TYPE_RAISER_MIDDLE","DUMMY_TYPE_RAISER_END","DUMMY_TYPE_DROP_SWITCH","DUMMY_TYPE_DROP_ITEM","DIRECTION_UP","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_DOWN","TAG_DISABLE_BLOCK","TAG_ALLOW_BLOCK","TAG_PLAYER","TAG_GOAL","require","extends","Component","initPosition","dummyType","dummyStatus","ctor","dummy_type","init_Position","DUMMY_INIT","node","setPosition","DUMMY_LIVE","collision","DUMMY_DESTORY","active","getStatus","getDuumyType","GameDummy","Init","Collision","isPlay","camera","Camera","mapOffset","default","type","Vec2","mapSize","idx","btnCase1","Button","btnCase2","btnCase3","btnRestart","btnGo","btnTest","btnMapChange","gameMap","TiledMap","Node","onLoad","InitGame","AddEvent","on","TestFunction","TestGoPlayer","TestChangeMap","TestCase1","TestCase2","TestCase3","x","y","loadInit","self","inter","setInterval","InitMap","InitPlayer","SetCamera","clearInterval","gamesSchedule","update","dt","OnCodePlay","initPlayerObject","initPos","pos","playerDir","dir","hp","food_count","rocket_parts_count","initvector","GVector","loader","loadRes","Prefab","err","prefab","error","instantiate","getComponent","addChild","stageObject","map","step","diff","level","gameLevel","v2","url","GetMapURL","TiledMapAsset","tmx_file","tmxAsset","getMapSize","tileSize","getTileSize","mapWidth","width","mapHeight","height","_IsTutorial","toString","cLevel","designResolution","Canvas","instance","r_x","view","getViewportRect","r_y","v3","FollowCamera","InitObject","excuteCommand","command","convertPos","setDirection","Movement","playerInit","TestAddData","Turn","changeData","mainCameraNode","find","bp","getPosition","po","add","raiser_status","match_id","DUMMY_SWITCH","ChangeStauts","Raiser","destPostion","isMoving","moveOffset","moveDuration","direction","distancePerFrame","nextPosition","start","changeSpriteDirection","scale","DIR"],"mappings":"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","sourcesContent":["\r\n\r\n\r\nvar Controller = cc.Class({\r\n    statics: {\r\n        // Singleton\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!Controller._instance) {\r\n                Controller._instance = new Controller();\r\n                Controller._instance.init();\r\n            }\r\n            return Controller._instance;\r\n        },\r\n    },\r\n\r\n    properties: {\r\n        // ���� �ʱ�ȭ �ɶ� ������ Json String\r\n        initJson : null,\r\n\r\n        // Streamming �ɶ� ������ Json String\r\n        streamJson : null,\r\n        loadIndex : 0,\r\n\r\n        gameStatus: false,\r\n    },\r\n\r\n    // Initialize\r\n    init: function () {\r\n\r\n    },\r\n\r\n\r\n    getInitStageData: function(){\r\n        return this.initJson.stage;\r\n    },\r\n\r\n    getInitPlayerData: function(){\r\n        return this.initJson.player;\r\n    },\r\n\r\n\r\n\r\n\r\n    getCommandLine: function(id){\r\n        var data = this.streamJson;\r\n\r\n        if(data == null) return -1;\r\n\r\n        if( id >= data.data.length ){\r\n            console.log(\"Out of Range\");\r\n            return -1;\r\n        }\r\n\r\n\r\n        return data.data[id];\r\n    },\r\n\r\n    getCommandLength : function(){\r\n        var data = this.streamJson;\r\n\r\n        return data.data.length -1;\r\n    },\r\n\r\n\r\n    /**\r\n     * �ܺο��� �ҷ�����, Json �����Ͱ� ����Ǵ� �Լ�\r\n     * @param json\r\n     * @param isInit\r\n     * @constructor\r\n     */\r\n    ReceiveJson : function(json, isInit = false){\r\n        if(isInit){\r\n            this.initJson = json;\r\n\r\n        }\r\n        else{\r\n            this.streamJson = json;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * ���� id �� ������\r\n     * @returns {number|*}\r\n     */\r\n    GetProgressId: function(){\r\n        return this.loadIndex;\r\n    },\r\n\r\n\r\n    /**\r\n     * ������ �����ϰ�, ID�� passing ���ִ� �Լ�\r\n     * @param id\r\n     * @constructor\r\n     */\r\n    SetProgressId: function(id){\r\n        this.loadIndex = id;\r\n    },\r\n\r\n    /**\r\n     * ���� ���°� �������� �Լ�\r\n     * @returns {boolean|*}\r\n     * @constructor\r\n     */\r\n    GetStatus : function(){\r\n        return this.gameStatus;\r\n    },\r\n\r\n\r\n    /**\r\n     * ������ �����ϰ� ���°� ����Ǹ� ���� ���ִ� �Լ�.\r\n     * @constructor\r\n     */\r\n    SetStatus: function(status){\r\n        // �̹� ���� ������ ����. ����.\r\n        this.gameStatus = status;\r\n    }\r\n\r\n\r\n});\r\n\r\nmodule.exports = Controller;\r\n\r\n/**\r\n * �������� ���� �ε�ɶ� Call �Ǵ� Init Json ������ ����\r\n */\r\nwindow.SendInitData = function(json){\r\n    if(Controller.getInstance().initJson != null) return true;\r\n\r\n    Controller.getInstance().ReceiveJson(json , true);\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * �ܺο��� Call �ϴ� Stream Function\r\n */\r\nwindow.SendStreamData = function(json){\r\n    Controller.getInstance().ReceiveJson(json);\r\n    Controller.getInstance().SetProgressId(0);\r\n    Controller.getInstance().SetStatus(true);\r\n\r\n};\r\n\r\nwindow.TestFunc = function(){\r\n  console.log(\"FUCK\");\r\n};\r\n\r\n\r\nwindow.SetProgressId = function(id){\r\n    Controller.getInstance().SetProgressId(id);\r\n};\r\n\r\n\r\nwindow.OnClickPlay = function(){\r\n    Controller.getInstance().SetStatus(true);\r\n};\r\n\r\n\r\n","\r\nwindow.Env = {\r\n\r\n\r\n\r\n\r\n\r\n    OFFSET_X : (32*3),\r\n    OFFSET_Y : (32*3),\r\n\r\n\r\n    PLAYER_RADIO : 32 * 1.5,\r\n\r\n\r\n    /**\r\n     * ���̰�ü ����\r\n     */\r\n    DUMMY_TYPE_FOOD: 1,\r\n    DUMMY_TYPE_ROCKET_PARTS: 2,\r\n    DUMMY_TYPE_SOLID_OIL:3,\r\n    DUMMY_TYPE_OIL: 4,\r\n    DUMMY_TYPE_ENGINE: 5,\r\n    DUMMY_TYPE_O2: 6,\r\n    DUMMY_TYPE_HEALPACK :7,\r\n\r\n\r\n    DUMMY_TYPE_BOMB : 8,\r\n    DUMMY_RAISER_SWITCH:9,\r\n    DUMMY_TYPE_RAISER_START: 10,\r\n    DUMMY_TYPE_RAISER_MIDDLE: 11,\r\n    DUMMY_TYPE_RAISER_END:12,\r\n\r\n\r\n    DUMMY_TYPE_DROP_SWITCH : 13,\r\n    DUMMY_TYPE_DROP_ITEM: 14,\r\n\r\n    /**\r\n     * �ɸ��� ���� ���� (�ٶ󺸰��ִ°�)\r\n    */\r\n    DIRECTION_UP: 'up',\r\n    DIRECTION_LEFT: 'left',\r\n    DIRECTION_RIGHT: 'right',\r\n    DIRECTION_DOWN: 'down',\r\n\r\n\r\n    /**\r\n     * FindTagConvertVecotor ���� ���Ǵ�\r\n     * �±� ���� �Դϴ�.\r\n     */\r\n\r\n    TAG_DISABLE_BLOCK : 0,\r\n    TAG_ALLOW_BLOCK : 1,\r\n\r\n    TAG_PLAYER : 1,\r\n    TAG_GOAL : 2,\r\n\r\n};\r\n","\r\n\r\nconst Controller = require(\"Controller\");\r\n\r\n\r\n/**\r\n * �ۼ��� �ϵ����Ʈ -�絿��,\r\n * GameDummy Class �Դϴ�.\r\n * �ش� Ŭ������ ���� Ŭ���� �̸�, ����Ŭ������ Ȯ���Ͽ� ����ϰ� �ֽ��ϴ�.\r\n *\r\n */\r\nvar GameDummy = cc.Class({\r\n    extends: cc.Component,\r\n    properties: {\r\n        // ���� ���� ������\r\n        initPosition: null,\r\n        dummyType: null,\r\n        dummyStatus: null,\r\n    },\r\n\r\n    /**\r\n     * �ۼ��� �ϵ����Ʈ -�絿��,\r\n     * @param {string} dummy_type - ��ü Ÿ���� �����ϴ� ��\r\n     * @param {position} init_Position - ���� �����Ǵ� ������ ����\r\n     * �ش� �����ڴ� ��ü ������ 1ȸ�� �ҷ���.\r\n     */\r\n    ctor: function(dummy_type, init_Position){\r\n        this.dummyType = dummy_type; // 'type' ��� 'dummy_type' ���\r\n        this.initPosition = init_Position;\r\n        this.init(); // �����ڿ��� init �޼��� ȣ��\r\n    },\r\n\r\n    /**\r\n     * �ۼ��� �ϵ����Ʈ -�絿��,\r\n     * �ʱ�ȭ ó���� ���ִ� �Լ�.\r\n     */\r\n    init: function(){\r\n        this.dummyStatus = Env.DUMMY_INIT;\r\n        this.node.setPosition(this.initPosition);\r\n        this.dummyStatus = Env.DUMMY_LIVE;\r\n    },\r\n\r\n    /**\r\n     * �ۼ��� �ϵ����Ʈ -�絿��,\r\n     * ��ü�� �浹�Ҷ� ���¸� �ٲ���. ������ �ʵ��� InActivate\r\n     */\r\n    collision: function(){\r\n        this.dummyStatus = Env.DUMMY_DESTORY;\r\n        this.node.active = false;\r\n    },\r\n\r\n    /**\r\n        @return {dummystatus} ���� ���� ���°��� ����ϴ� �Լ�.\r\n     */\r\n    getStatus: function(){\r\n        return this.dummyStatus;\r\n    },\r\n\r\n    getDuumyType: function(){\r\n        return this.dummyType;\r\n    }\r\n\r\n});\r\n","\r\nvar GameDummy = require(\"GameDummy\");\r\n\r\nvar GameItem = cc.Class ({\r\n    extends: GameDummy, // GameDummy Ŭ������ ��ӹ���\r\n    /**\r\n     *     DUMMY_TYPE_FOOD: 0,\r\n     *     DUMMY_TYPE_BOMB : 1,\r\n     *     DUMMY_TYPE_ROCKET_PARTS: 2,\r\n     *     DUMMY_TYPE_SOLID_OIL:3,\r\n     *     DUMMY_TYPE_OIL: 4,\r\n     *     DUMMY_TYPE_ENGINE: 5,\r\n     *     DUMMY_TYPE_O2: 5,\r\n     *     DUMMY_TYPE_HEALPACK :6,\r\n     */\r\n    properties: {\r\n\r\n    },\r\n\r\n    ctor: function(dummy_type, init_Position){\r\n        this.dummyType = dummy_type;\r\n        this.init();\r\n        this.initPosition = init_Position;\r\n    },\r\n\r\n    /**\r\n     * �ʱ�ȭ �Լ�\r\n     * @constructor\r\n     */\r\n    Init: function(){\r\n        this.init();\r\n    },\r\n\r\n    /**\r\n     * �浹ó��\r\n     * @constructor\r\n     */\r\n    Collision: function(){\r\n        this.collision();\r\n    }\r\n\r\n});\r\n","\r\n\r\n\r\nconst Controller = require(\"../Controller\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // Stage Start Offset\r\n\r\n        isPlay: false,\r\n\r\n        camera : cc.Camera,\r\n\r\n        mapOffset : {\r\n            default:[],\r\n            type: [cc.Vec2],\r\n        },\r\n\r\n        mapSize : {\r\n          default: null,\r\n          type: cc.Vec2\r\n        },\r\n\r\n\r\n        idx: 0,\r\n\r\n        /**\r\n         * �׽�Ʈ ����\r\n         */\r\n\r\n        btnCase1: cc.Button,\r\n        btnCase2: cc.Button,\r\n        btnCase3: cc.Button,\r\n        btnRestart : cc.Button,\r\n        btnGo : cc.Button,\r\n        btnTest: cc.Button,\r\n        btnMapChange: cc.Button,\r\n        /**\r\n         *\r\n         */\r\n\r\n        // ���� ����ϴ� ��ü ����.\r\n        gameMap: cc.TiledMap,\r\n        player : cc.Node,\r\n    },\r\n\r\n    onLoad(){\r\n        this.InitGame();\r\n        this.AddEvent();\r\n    },\r\n\r\n    /**\r\n     * DEBUG ��ư �̺�Ʈ �Դϴ�.\r\n     * @constructor\r\n     */\r\n    AddEvent: function () {\r\n        this.btnTest.node.on('click',this.TestFunction, this);\r\n        this.btnGo.node.on(\"click\", this.TestGoPlayer, this);\r\n        this.btnMapChange.node.on(\"click\",this.TestChangeMap, this);\r\n\r\n        this.btnCase1.node.on(\"click\",this.TestCase1, this);\r\n        this.btnCase2.node.on(\"click\",this.TestCase2, this);\r\n        this.btnCase3.node.on(\"click\",this.TestCase3, this);\r\n    },\r\n\r\n    /**\r\n     * ������ �ε�Ǿ����� �ʱ�ȭ ���ִ� �Լ��Դϴ�.\r\n     * @constructor\r\n     *\r\n     *\r\n     */\r\n    InitGame: function(){\r\n        var self = this;\r\n\r\n        this.mapOffset = [\r\n            { x: 0, y: 2 },\r\n            { x: 2, y: 3 }\r\n        ];\r\n\r\n        /**\r\n         * ���� init��  ������ �����ϰ�, �ҷ������� ����.\r\n         * �÷��̾� ������, ��, ó��,\r\n         * 30 fps ����.\r\n         */\r\n\r\n        //var v = Controller.getInstance().initJson;\r\n        //console.log(v);\r\n        this.loadInit();\r\n    },\r\n\r\n\r\n    loadInit: function(){\r\n\r\n        var self = this;\r\n\r\n        var inter = setInterval(function(){\r\n\r\n            if(Controller.getInstance().initJson != null){\r\n                self.InitMap();\r\n                self.InitPlayer();\r\n                self.SetCamera();\r\n                clearInterval(inter);\r\n            }\r\n            else{\r\n                console.log(\"Loading\");\r\n            }\r\n        }, 100);\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n\r\n    gamesSchedule: function(){\r\n\r\n    },\r\n\r\n    update(dt){\r\n\r\n        var status = Controller.getInstance().GetStatus();\r\n\r\n        if(status){\r\n            this.OnCodePlay();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @constructor\r\n     * �÷��̾� �ʱ�ȭ ���ִ� �Լ� �Դϴ�.\r\n     */\r\n    InitPlayer: function(){\r\n\r\n        //var stageObject = Controller.getInstance().getInitStageData();\r\n        var initPlayerObject = Controller.getInstance().getInitPlayerData();\r\n\r\n        var initPos = initPlayerObject.pos;\r\n        var playerDir = initPlayerObject.dir;\r\n        var initHp = initPlayerObject.hp;\r\n        var playerStatus = initPlayerObject.status;\r\n        var foodCount = initPlayerObject.food_count;\r\n        var rocket_parts_count = initPlayerObject.rocket_parts_count;\r\n        \r\n\r\n        var self = this;\r\n\r\n        var initvector = this.GVector(initPos[0],initPos[1]);\r\n\r\n        // 2.3.x ����\r\n        cc.loader.loadRes('./prefabs/Player', cc.Prefab, function (err, prefab) {\r\n            // ���ҽ� �ε尡 �Ϸ�� �� ������ �ڵ�\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            // �ε�� SpriteFrame ���\r\n            self.player = cc.instantiate(prefab);\r\n            self.player.getComponent(\"Player\").Init(initvector, playerDir);\r\n\r\n            // ���� ��ũ��Ʈ�� �߰��Ǿ� �ִ� ��忡 �÷��̾� ��带 �߰��մϴ�.\r\n            self.node.addChild(self.player);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * ���� ���� ���ͷ� ��ȯ ���ִ� �Լ�\r\n      * @param v2\r\n     * @constructor\r\n     */\r\n    GVector : function (x, y){\r\n\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var map  = stageObject.map;\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n\r\n        var gameLevel = 0;\r\n        if(map == 1 && step == 0 && diff == 0){\r\n            gameLevel = level;\r\n        }\r\n\r\n        var initPlayerObject = Controller.getInstance().getInitPlayerData();\r\n        var initPos = initPlayerObject.pos;\r\n        var v2 = cc.v2(\r\n            ((x +this.mapOffset[gameLevel].x) * Env.OFFSET_X) + Env.PLAYER_RADIO,\r\n            ((y +this.mapOffset[gameLevel].y) * Env.OFFSET_Y) + Env.PLAYER_RADIO\r\n        );\r\n\r\n        return v2;\r\n    },\r\n\r\n\r\n    /**\r\n     * �������� �ε��ϰ�, �ʱ�ȭ �մϴ�.\r\n     * @constructor\r\n     */\r\n    InitMap: function(){\r\n        var mapurl = this.GetMapURL();\r\n        var self = this;\r\n\r\n        var url = \"./map/\" + mapurl;\r\n\r\n        // // 2.3.x ����\r\n        cc.loader.loadRes(url, cc.TiledMapAsset, function (err, tmx_file) {\r\n            // ���ҽ� �ε尡 �Ϸ�� �� ������ �ڵ�\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            self.gameMap.tmxAsset = tmx_file;\r\n\r\n\r\n            /**\r\n             * �Ʒ� ���� �ʻ���� ����Ͽ� �ش� ������ ��ŭ ī�޶� ������ �������ݴϴ�.\r\n             */\r\n            var mapSize = self.gameMap.getMapSize();\r\n            var tileSize = self.gameMap.getTileSize();\r\n\r\n            var mapWidth = mapSize.width * tileSize.width;\r\n            var mapHeight = mapSize.height * tileSize.height;\r\n\r\n            var v2 = cc.v2(mapWidth, mapHeight);\r\n\r\n            self.mapSize = v2;\r\n\r\n            self.SetCamera(v2.x, v2.y);\r\n        });\r\n    },\r\n\r\n\r\n    /**\r\n     * �ҷ��� �����Ͱ� Ʃ�丮������ üũ�ϴ� �Լ�\r\n     * @param map\r\n     * @param step\r\n     * @param diff\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    _IsTutorial : function(map,step,diff){\r\n        if(step == 0 && diff == 0 ) return true;\r\n        else false;\r\n    },\r\n\r\n    /**\r\n     * �� url ������ �������ش�.\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    GetMapURL : function(){\r\n        var url = \"\";\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var map  = stageObject.map;\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level +1;\r\n\r\n\r\n        if(this._IsTutorial(map,step,diff)){\r\n            url = \"map_T-\"+level.toString();\r\n        }\r\n        else{\r\n            var cLevel = \"E\";\r\n            switch (level){\r\n                case 1: cLevel= \"E\"; break;\r\n                case 2: cLevel = \"N\"; break;\r\n                case 3: cLevel = \"H\"; break;\r\n            }\r\n            url = \"map_\"+map.toString()+ \"-\" + step.toString() + \"-\" + diff.toString() + \"-\" + cLevel;\r\n        }\r\n        return url;\r\n    },\r\n\r\n\r\n    /**\r\n     * ī�޶� �ʱ�ȭ , �� �߾����� �켱\r\n     * @constructor\r\n     */\r\n    SetCamera : function(x = 0, y = 0){\r\n        const designResolution = cc.Canvas.instance.designResolution;\r\n        // ���� ����Ʈ �ػ� ���� ��������\r\n        const viewportRect = cc.view.getViewportRect();\r\n\r\n        var r_x = -((designResolution.width/2) - x);\r\n        var r_y = -((designResolution.height/2) - y);\r\n\r\n        // ���� ī�޶��� ������ ����\r\n        this.camera.node.setPosition(cc.v3(r_x, r_y, 0)); // ���⼭ x, y, z�� �������� ��ǥ���Դϴ�.\r\n    },\r\n\r\n    FollowCamera : function(pos){\r\n\r\n    },\r\n\r\n    /**\r\n     * ������ ��ü ���̾ �ʱ�ȭ�մϴ�.\r\n     * @constructor\r\n     */\r\n    InitObject: function(){\r\n\r\n    },\r\n\r\n    /**\r\n     * PYthon �ڵ� ��� ������ �����մϴ�.\r\n     * ���� �÷��̾ �̵��մϴ�.\r\n     * �� return ���� false �ϸ� �̵����Ḧ ���մϴ�.\r\n     * @returns {boolean}\r\n     */\r\n    excuteCommand: function(id = 0){\r\n        var command = Controller.getInstance().getCommandLine(id);\r\n\r\n        if(command == -1) return false;\r\n        if(command.status == 1) return false;\r\n\r\n        var convertPos = this.GVector(command.player.pos[0], command.player.pos[1]);\r\n\r\n        this.player.getComponent(\"Player\").setDirection(command.player.dir);\r\n        this.player.getComponent(\"Player\").Movement(convertPos);\r\n        return true;\r\n    },\r\n\r\n\r\n\r\n    OnCodePlay: function(){\r\n        if(this.isPlay) return;\r\n        //console.log(t);\r\n        var self = this;\r\n        this.isPlay = true;\r\n\r\n        this.idx = Controller.getInstance().GetProgressId();\r\n\r\n        var inter = setInterval(function(){\r\n            if(self.excuteCommand(self.idx) == false){\r\n                clearInterval(inter);\r\n                self.isPlay = false;\r\n                Controller.getInstance().SetStatus(false);\r\n            }\r\n            self.idx++;\r\n        }, 1000/30);\r\n    },\r\n\r\n    /**\r\n     * DEBUG �� �Լ��Դϴ�.\r\n     * @constructor\r\n     */\r\n    TestFunction: function(){\r\n       this.player.getComponent(\"Player\").playerInit();\r\n    },\r\n\r\n    /**\r\n     * DEBUG �Լ��Դϴ�.\r\n     * @constructor\r\n     */\r\n    TestGoPlayer: function(){\r\n        if(this.isPlay) return;\r\n        this.idx = 0;\r\n        var self = this;\r\n        var inter = setInterval(function(){\r\n\r\n            self.isPlay = true;\r\n\r\n            if(self.excuteCommand(self.idx) == false){\r\n                clearInterval(inter);\r\n                self.isPlay = false;\r\n            }\r\n            self.idx++;\r\n        }, 1000/30);\r\n\r\n    },\r\n\r\n    TestAddData: function(){\r\n        this.player.getComponent(\"Player\").Turn(Env.DIRECTION_RIGHT);\r\n    },\r\n\r\n    TestCase1: function(){\r\n        Controller.getInstance().changeData(0);\r\n    },\r\n    TestCase2: function(){\r\n        Controller.getInstance().changeData(1);\r\n    },\r\n    TestCase3: function(){\r\n        Controller.getInstance().changeData(2);\r\n    },\r\n\r\n    TestChangeMap: function(){\r\n\r\n        const mainCameraNode = cc.find(\"Canvas/Main Camera\");\r\n\r\n        var bp = mainCameraNode.getPosition();\r\n        console.log(bp);\r\n\r\n        var po = bp.add(cc.v3(-1,0 , 0));\r\n\r\n        console.log(po);\r\n        mainCameraNode.setPosition(po);\r\n\r\n\r\n    }\r\n});\r\n","\r\nvar GameDummy = require(\"GameDummy\");\r\n\r\ncc.Class({\r\n    extends: GameDummy,\r\n\r\n    /**\r\n     *     DUMMY_SWITCH:8,\r\n     *\r\n     *     DUMMY_TYPE_RAISER_START: 10,\r\n     *     DUMMY_TYPE_RAISER_MIDDLE: 11,\r\n     *     DUMMY_TYPE_RAISER_END:12,\r\n     */\r\n    properties: {\r\n        raiser_status: false,\r\n        match_id: 0,\r\n\r\n    },\r\n\r\n    ctor: function(dummy_type, init_Position, id){\r\n        this.dummyType = dummy_type;\r\n        this.init();\r\n        this.initPosition = init_Position;\r\n        this.match_id = id;\r\n    },\r\n\r\n    /**\r\n     * �ʱ�ȭ �Լ�\r\n     * @constructor\r\n     */\r\n    Init: function(){\r\n        this.init();\r\n    },\r\n\r\n\r\n    /**\r\n     * �浹ó��\r\n     * @constructor\r\n     */\r\n    Collision: function(){\r\n\r\n        if(this.dummyType == Env.DUMMY_SWITCH){\r\n            this.ChangeStauts();\r\n        }\r\n        else{\r\n            this.Raiser();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * ����ġ�� ���ٰ���\r\n     * @constructor\r\n     */\r\n    ChangeStauts: function(){\r\n        this.raiser_status = !this.raiser_status;\r\n\r\n    },\r\n\r\n    Raiser: function(){\r\n        // �������� ��������� ���� �Ұ� ����. ������ ��.\r\n        if(this.raiser_status)  return false;\r\n\r\n        return true;\r\n    },\r\n\r\n\r\n\r\n});\r\n","\r\nvar GameDummy = require('GameDummy');\r\n\r\nvar GameTrap = cc.Class({\r\n    extends: GameDummy,\r\n\r\n    /**\r\n     *     DUMMY_TYPE_TRAP: 7,\r\n     */\r\n    properties: {\r\n\r\n    },\r\n\r\n    ctor: function(dummy_type, init_Position){\r\n        this.dummyType = dummy_type;\r\n        this.init();\r\n        this.initPosition = init_Position;\r\n    },\r\n\r\n    /**\r\n     * �ʱ�ȭ �Լ�\r\n     * @constructor\r\n     */\r\n    Init: function(){\r\n        this.init();\r\n    },\r\n\r\n    /**\r\n     * �浹ó��\r\n     * @constructor\r\n     */\r\n    Collision: function(){\r\n        this.collision();\r\n    },\r\n\r\n\r\n\r\n\r\n});\r\n","\r\n\r\nconst Controller = require(\"Controller\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        initPosition: null,\r\n        destPostion: null,\r\n\r\n        isMoving: false,\r\n        moveOffset: Env.OFFSET_X,\r\n        moveDuration: 1,\r\n\r\n        direction : Env.DIRECTION_UP,\r\n        distancePerFrame : 0,\r\n\r\n        nextPosition: 0,\r\n    },\r\n\r\n    start(){\r\n\r\n    },\r\n\r\n    // update(dt){},\r\n\r\n    /**\r\n     * �÷��̾ �̵��մϴ�.\r\n     * ���� ������ �ִ� ���� ��� �̵��մϴ�.\r\n     * @constructor\r\n     */\r\n    Movement: function(pos){\r\n        this.changeSpriteDirection();\r\n        this.node.setPosition(pos);\r\n    },\r\n\r\n    changeSpriteDirection: function(){\r\n        switch (this.direction){\r\n            case Env.DIRECTION_UP:\r\n                this.node.scale =cc.v2(1, -1);\r\n                break;\r\n            case Env.DIRECTION_DOWN:\r\n                this.node.scale =cc.v2(-1, 1);\r\n                break;\r\n            case Env.DIRECTION_RIGHT:\r\n                this.node.scale =cc.v2(-1, 1);\r\n                break;\r\n            case Env.DIRECTION_LEFT:\r\n                this.node.scale =cc.v2(1, 1);\r\n                break;\r\n        }\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * @param v2  ���� ������ �ε����� ������ �ɴϴ�.\r\n     * @param DIR  ���� �÷��̾ �ٶ󺸰� �ִ� ����\r\n     */\r\n    Init: function(v2 , DIR){\r\n\r\n\r\n        this.initPosition = v2;\r\n        this.node.setPosition(v2);\r\n    },\r\n\r\n    playerInit:function(){\r\n        this.node.setPosition(this.initPosition);\r\n        this.direction = Env.DIRECTION_RIGHT;\r\n        this.changeSpriteDirection();\r\n    },\r\n\r\n    setDirection : function(dir){\r\n        this.direction = dir;\r\n    }\r\n   \r\n});\r\n"],"file":"project.js"}