{"version":3,"sources":["assets/scripts/Controller.js","assets/scripts/Env.js","assets/scripts/GameLogic/GameManager.js","assets/scripts/Object/Gobject.js","assets/scripts/GameLogic/Loader.js","assets/scripts/minigame1/MainScene.js","assets/scripts/Object/ObjectLaiser.js","assets/scripts/Object/Player.js","assets/scripts/GameLogic/SoundManager.js"],"names":["Controller","cc","Class","statics","_instance","getInstance","properties","initJson","streamJson","loadIndex","gameStatus","getInitStageData","this","stage","getInitPlayerData","player","getInitOjbectDatas","init_item_list","getCommandLine","id","data","length","console","log","getCommandLength","ReceiveJson","json","arguments","undefined","GetProgressId","SetProgressId","GetStatus","SetStatus","status","SetOption","InitOption","module","exports","window","SendInitData","SendStreamData","OnClickPlay","SetOptions","Env","OFFSET_X","OFFSET_Y","PLAYER_RADIO","SFX_FOOTSTEP_L","SFX_FOOTSTEP_R","SFX_DIRECTORY_PATH","SFX_FILENAME_DROP_SWITCH","SFX_FILENAME_LASER_SWITCH","SFX_FILENAME_EXPLOSION","SFX_FILENAME_EARN","SFX_FILENAME_DROP_ITEM","SFX_FILENAME_LASER_ON","SFX_FILENAME_LASER_OFF","SFX_FILENAME_PARTS_DOCKING","SFX_DROP_SWITCH","SFX_LASER_BUTTON","SFX_BOMB","SFX_EARN_ITEM","SFX_DROP_ITEM","SFX_LASER_ON","SFX_LASER_OFF","SFX_PARTS_DOCKING","FOOD","NORMAL_SWITCH_ON","NORMAL_SWITCH_OFF","LASER_SWITCH_ON","LASER_SWITCH_OFF","BATTERY","BOMB","ROCKET_EMPTY","ROCKET_FILLED","LASER_START_ON","LASER_MIDDLE_ON","LASER_END_ON","LASER_START_OFF","LASER_END_OFF","GOAL","VLASER_START_ON","VLASER_MIDDLE_ON","VLASER_END_ON","VLASER_START_OFF","FLOOR","MAX_LOAD_IMAGE_LENGTH","DIRECTORY_PATH","FOOD_BOX_FILE_NAME","N_SWITCH_ON_FILE_NAME","N_SWITCH_OFF_FILE_NAME","L_SWITCH_ON_FILE_NAME","L_SWITCH_OFF_FILE_NAME","BATTERY_FILE_NAME","BOMB_FILE_NAME","ROCKET_EMPTY_FILE_NAME","ROCKET_FILLED_FILE_NAME","L_START_ON_FILE_NAME","L_MIDDLE_FILE_NAME","L_END_ON_FILE_NAME","L_START_OFF_FILE_NAME","L_END_OFF_FILE_NAME","GOAL_FILE_NAME","VL_START_ON_FILE_NAME","VL_MIDDLE_ON_FILE_NAME","VL_END_ON_FILE_NAME","VL_START_OFF_FILE_NAME","FLOOR_FILE_NAME","DIRECTION_UP","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_DOWN","PLAYER_DEFAULT_UP","PLAYER_DEFAULT_DOWN","PLAYER_DEFAULT_LEFT","PLAYER_DEFAULT_RIGHT","ANIMATION_LEFT","ANIMATION_RIGHT","ANIMATION_UP","ANIMATION_DOWN","ANIMATION_IDLE_LEFT","ANIMATION_IDLE_RIGHT","ANIMATION_IDLE_UP","ANIMATION_IDLE_DOWN","ANIMATION_LEFT_HIT","ANIMATION_RIGHT_HIT","require","SoundManger","Loader","SoundManager","extends","Component","btnTest","Button","loadingBG","Node","isLoaded","isPlay","camera","Camera","mapOffset","default","idx","gameMap","TiledMap","spaceShip","bgNode","floorParent","item","dropItemList","dropSwitchList","goalObject","objectParent","effectParent","audioManager","pList","pIdx","hList","hIdx","expList","expIdx","dropEffectList","dropEffectIdx","isPlayExplosion","onLoad","active","self","inter","setInterval","GetImage","clearInterval","InitGame","start","audioInter","IsLoadCheck","_TileMapShake","s","setTimeout","CameraMoveX","currentPosition","node","position","newXPosition","x","v3","y","z","setPosition","LoadingFadeOut","loadingInterval","opacity","loadInit","EffectInit","InitMap","InitPlayer","InitObject","InitialCamera","update","dt","OnCodePlay","initPlayerObject","initPos","pos","playerDir","dir","hp","food_count","rocket_parts_count","initvector","GVector","loader","loadRes","Prefab","err","prefab","error","instantiate","getComponent","Init","addChild","lX","lY","stageObject","step","diff","level","gameLevel","ConvertGameLevel","v2","url","GetMapURL","TiledMapAsset","tmx_file","tmxAsset","mapSize","getMapSize","tileSize","getTileSize","mapWidth","width","mapHeight","height","map","toString","cLevel","SetCamera","zoomLevel","zoomRatio","i","effect","n1","push","ShowExplosion","animation","Animation","on","play","ShowHeal","ShowPickup","PlaySfx","ShowDropEffect","goalList","goal_list","MakeGoal","objects","MakeUpObject","object","j","goal","targets","goalPos","AddPrefabs","type","startX","pos_start","startY","startPos","AddLaserPrefab","endX","pos_end","endY","endPos","p","switchId","switchTag","NameToTag","switchX","switchY","switchPos","dropX","pos_drop","dropY","dropType","drop_type","dropItemTag","dropItemPos","AddDropSwitchPrefabs","tag","posX","posY","itemId","AddRocketParts","str","prefabs","addComponent","v1","require_dir","rotation","setLocalZOrder","prefabName","itemurl","drop_item_tag","drop_item_pos","DropItemHide","isStatus","LaserInitial","executeCommand","command","ObjectUpdate","item_list","playerStatus","convertPos","EffectControl","setPlayerStatus","setDirection","Movement","id_list","ItemStatusUpdate","DropSwitchUpdate","index","dropSwitch","dropSwitchId","GetItemID","itemComp","dropItem","FindDropItem","DropItemShow","Hide","Show","itemObject","itemID","GetItemTag","itemTAG","isStatusChange","laser_direction","TAG","ChangeSprite","getChildByName","isOn","direction","ShowProofEffect","proofEffect","Sprite","spriteFrame","init","initStatus","spr","player_IMG","_LoadImage","Array","fill","SpriteFrame","warn","sliderBar","ProgressBar","targetObject","stopBtn","isDegreeReverse","isProgressReverse","isStopped","degree","progressValue","AddEvent","DegreeGameStart","ProgresGameStart","interactable","StopDegreeLooper","isStoped","DecreaseProgress","IncreaseProgress","progress","DecreaseDegree","IncreaseDegree","angle","Gobject","number","num","_super","initPosition","bubble","bubbleLabel","Label","isShowMessage","playerIsDead","playerStatusInfo","audioFootStep","AudioClip","audioStep","isPlaySound","changeSpriteDirection","PlayFootStep","audioClip","audioEngine","bind","animationClip","PlayerInitAnimation","getAnimationState","isPlaying","DIR","_HideBubble","zIndex","macro","MAX_ZINDEX","defaultDIR","playerInit","PlayerDealAnimation","ShowMessage","label","string","_ShowBubble","pInterval","e","sound","isLoadedSFX","_LoadSFX","clip"],"mappings":"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","sourcesContent":["﻿/**\r\n *\r\n * 웹 페이지와 인터렉션을 받는 클래스 입니다. 싱글턴 클래스입니다.\r\n * 해당클래스는 Json 정보를 저장하고,\r\n * Manager 클래스에서 게임을 총괄합니다.\r\n * Manager 다른클래스에서  해당 클래스를 불러 값을 가져옵ㄴ다.\r\n *\r\n * @type {Function}\r\n */\r\nvar Controller = cc.Class({\r\n    statics: {\r\n        // Singleton\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!Controller._instance) {\r\n                Controller._instance = new Controller();\r\n                // Controller._instance.init();\r\n            }\r\n            return Controller._instance;\r\n        },\r\n    },\r\n\r\n    /**\r\n     *  initJson 최초 초기화 된 정보 json\r\n     *  streamJson 명령문 모든 json 정보\r\n     *  loadIndex 현재 선택된 id 값 index 뜻\r\n     *  gameStatus\r\n     *      - true 업데이트 돌아감\r\n     *      - false 종료 상태\r\n     */\r\n    properties: {\r\n        initJson : null,\r\n        streamJson : null,\r\n        loadIndex : 0,\r\n        gameStatus: false,\r\n    },\r\n\r\n\r\n    /**\r\n     * 최초 맵 초기화 정보를 받는 함수\r\n     * @returns {*} stageJson 값\r\n     */\r\n    getInitStageData: function(){\r\n        return this.initJson.stage;\r\n    },\r\n\r\n    /**\r\n     * 최초 플레이어 초기화 정보를 받는 함수\r\n     * @returns {*} playerJson값\r\n     */\r\n    getInitPlayerData: function(){\r\n        return this.initJson.player;\r\n    },\r\n\r\n\r\n    /**\r\n     *\r\n     * @returns {*}\r\n     */\r\n    getInitOjbectDatas: function(){\r\n        return this.initJson.stage.init_item_list;\r\n    },\r\n\r\n    /**\r\n     * 로드된 json정보를 id파라미터를 통해 로드\r\n     * 메인으로 사용되는 함수\r\n     * 최대 명령어 줄이 瑛뺐嚥?-1 값을 리턴 사용처에선 -1이면 명령어 끝을 의미\r\n     * @param id id 값\r\n     * @returns {number|*} id에 해당하는 json 정보모두\r\n     */\r\n    getCommandLine: function(id){\r\n\r\n\r\n        var data = this.streamJson;\r\n\r\n        if(data == null) return -1;\r\n\r\n        if( id >= data.data.length ){\r\n            console.log(\"Out of Range\");\r\n            return -1;\r\n        }\r\n\r\n\r\n        return data.data[id];\r\n    },\r\n\r\n    /**\r\n     * 로드된 명령어줄의 길이를 받는 함수\r\n     * @returns {number} Json 현재 길이 리턴\r\n     */\r\n    getCommandLength : function(){\r\n        var data = this.streamJson;\r\n\r\n        return data.data.length -1;\r\n    },\r\n\r\n\r\n    /**\r\n     * 외부에서 불려지고, Json 데이터가 저장되는 함수\r\n     * 다른 곳에선 액세스되선 안됩니다.\r\n     *\r\n     * @param json json 데이터\r\n     * @param isInit  초기화상태\r\n     * @constructor\r\n     */\r\n    ReceiveJson : function(json, isInit = false){\r\n        if(isInit){\r\n            this.initJson = json;\r\n\r\n        }\r\n        else{\r\n            this.streamJson = json;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 현재 프로그래스 바 id 값 가져옵니다.\r\n     * @returns {number|*} id 정보\r\n     */\r\n    GetProgressId: function(){\r\n        return this.loadIndex;\r\n    },\r\n\r\n\r\n    /**\r\n     * 웹에서 접근하고, ID값 passing 해주는 함수\r\n     * @param id id값을 받습니다.\r\n     * @constructor\r\n     */\r\n    SetProgressId: function(id){\r\n        this.loadIndex = id;\r\n    },\r\n\r\n    /**\r\n     * 현재 상태값 가져오는 함수\r\n     * 해당 함수로 코드가 종료되었는지, 실행중인지 체크됩니다.\r\n     * 0 ,실행중 아님 상태\r\n     * 1, 실행중 상태\r\n     * @returns {boolean|*} 게임 상태값을 가져옵니다.\r\n     * @constructor\r\n     */\r\n    GetStatus : function(){\r\n        return this.gameStatus;\r\n    },\r\n\r\n\r\n    /**\r\n     * 웹에서 접근하고 상태값 변경되면 변경 해주는 함수.\r\n     * @constructor\r\n     */\r\n    SetStatus: function(status){\r\n        // 이미 돌고 있으면 막음. 예비.\r\n        this.gameStatus = status;\r\n    },\r\n\r\n\r\n    /**\r\n     *\r\n     * 옵션정보 넘겨주는 함수\r\n     * @param json Json 옵션 정보\r\n     * @constructor\r\n     */\r\n    SetOption: function(json){\r\n\r\n    },\r\n\r\n    /**\r\n     * 최초 옵션 정보 받는 Json\r\n     * @param json Json 옵션 정보\r\n     * @constructor\r\n     */\r\n    InitOption: function(json){\r\n\r\n    },\r\n\r\n\r\n\r\n});\r\n\r\nmodule.exports = Controller;\r\n\r\n/**\r\n * 페이지가 최초 로드될때 Call 되는 Init Json 데이터\r\n */\r\nwindow.SendInitData = function(json){\r\n    if(Controller.getInstance().initJson != null) return true;\r\n\r\n    Controller.getInstance().ReceiveJson(json , true);\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * 외부에서 Call 하는 Stream Function\r\n */\r\nwindow.SendStreamData = function(json){\r\n    Controller.getInstance().ReceiveJson(json);\r\n    Controller.getInstance().SetProgressId(0);\r\n    Controller.getInstance().SetStatus(true);\r\n\r\n};\r\n\r\n/**\r\n * 현재 프로그래스바 id 값 웹에서 넘어오는 함수\r\n */\r\nwindow.SetProgressId = function(id){\r\n    Controller.getInstance().SetProgressId(id);\r\n};\r\n\r\n\r\n/**\r\n * 웹상 play버튼 클릭시 실행하는 함수\r\n * status값을 true로 바꿔 update문 돌도록 함.\r\n * @constructor\r\n */\r\nwindow.OnClickPlay = function(){\r\n    Controller.getInstance().SetStatus(true);\r\n};\r\n\r\n/**\r\n * 게임도중 옵션정보가 넘어올때 Json 값.\r\n * @param json 옵션 json\r\n * @constructor\r\n */\r\nwindow.SetOptions = function(json){\r\n    Controller.getInstance().SetOption(json);\r\n}\r\n\r\n/**\r\n * 최초 실행시 옵션정보 넘겨주는 Json\r\n * @param json 옵션 Json\r\n * @constructor\r\n */\r\nwindow.InitOption= function(json){\r\n    Controller.getInstance().InitOption(json);\r\n}\r\n\r\n\r\n","﻿\r\nwindow.Env = {\r\n    /**\r\n     * 맵 기본 사이즈 스케일링\r\n     */\r\n    OFFSET_X : (32*3),\r\n    OFFSET_Y : (32*3),\r\n    //96\r\n\r\n    //0,-1\r\n\r\n    /**\r\n     * 플레이어 포지션 오프셋.\r\n     */\r\n    PLAYER_RADIO : 32 * 1.5,\r\n    //48\r\n\r\n\r\n\r\n    /**\r\n     * SFX 태그 정보 해당 태그를 이용해 불르도록.\r\n     */\r\n    // 플레이어 에서 진행함\r\n    SFX_FOOTSTEP_L : 0,\r\n    SFX_FOOTSTEP_R : 1,\r\n\r\n\r\n\r\n    /**\r\n     * 음악\r\n     */\r\n    SFX_DIRECTORY_PATH : \"./sfx/\",\r\n\r\n    SFX_FILENAME_DROP_SWITCH : 'drop_switch',\r\n    SFX_FILENAME_LASER_SWITCH : 'laser_switch',\r\n    SFX_FILENAME_EXPLOSION : 'explosion',\r\n    SFX_FILENAME_EARN: 'itemEarn',\r\n    SFX_FILENAME_DROP_ITEM : 'drop_item',\r\n    SFX_FILENAME_LASER_ON : 'laser_on',\r\n    SFX_FILENAME_LASER_OFF : 'laser_off',\r\n    SFX_FILENAME_PARTS_DOCKING: 'parts_done',\r\n\r\n\r\n    // Audio Manager 에서 불려짐.\r\n    SFX_DROP_SWITCH: 0,\r\n    SFX_LASER_BUTTON: 1,\r\n    SFX_BOMB : 2,\r\n    SFX_EARN_ITEM : 3,\r\n    SFX_DROP_ITEM: 4,\r\n    SFX_LASER_ON : 5,\r\n    SFX_LASER_OFF : 6,\r\n    SFX_PARTS_DOCKING : 7,\r\n\r\n\r\n\r\n\r\n\r\n    // Loader Singleton 에서 사용되는 전역 넘버\r\n    /**\r\n     * Loader Singletone 객체에 대한 태그\r\n     */\r\n    FOOD: 0,\r\n    NORMAL_SWITCH_ON: 1,\r\n    NORMAL_SWITCH_OFF: 2,\r\n    LASER_SWITCH_ON : 3,\r\n    LASER_SWITCH_OFF:4,\r\n    BATTERY : 5,\r\n    BOMB:6,\r\n    ROCKET_EMPTY : 7,\r\n    ROCKET_FILLED: 8,\r\n    LASER_START_ON:9,\r\n    LASER_MIDDLE_ON:10,\r\n    LASER_END_ON:11,\r\n    LASER_START_OFF:12,\r\n    LASER_END_OFF:13,\r\n    GOAL: 14,\r\n\r\n    VLASER_START_ON : 15,\r\n    VLASER_MIDDLE_ON : 16,\r\n    VLASER_END_ON : 17,\r\n    VLASER_START_OFF: 18,\r\n    FLOOR : 19,\r\n    // 최대 사이즈표현\r\n    MAX_LOAD_IMAGE_LENGTH : 20,\r\n\r\n\r\n    /**\r\n     * Loader class 에서 사용되는 파일명 및 경로\r\n     */\r\n    DIRECTORY_PATH : \"./$jin/\",\r\n\r\n    FOOD_BOX_FILE_NAME : 'foodBox',\r\n    N_SWITCH_ON_FILE_NAME : 'nSwitch_on',\r\n    N_SWITCH_OFF_FILE_NAME : 'nSwitch_off',\r\n    L_SWITCH_ON_FILE_NAME : 'lSwitch_on',\r\n    L_SWITCH_OFF_FILE_NAME : 'lSwitch_off',\r\n    BATTERY_FILE_NAME : \"battery\",\r\n    BOMB_FILE_NAME : 'bomb',\r\n    ROCKET_EMPTY_FILE_NAME: 'rocket_empty',\r\n    ROCKET_FILLED_FILE_NAME : 'rocket_fill',\r\n    L_START_ON_FILE_NAME : 'lStart_on',\r\n    L_MIDDLE_FILE_NAME : 'lMiddle_on',\r\n    L_END_ON_FILE_NAME : 'lEnd_on',\r\n    L_START_OFF_FILE_NAME : 'lStart_off',\r\n    L_END_OFF_FILE_NAME : 'lEnd_off',\r\n    GOAL_FILE_NAME : 'test-none',\r\n\r\n    VL_START_ON_FILE_NAME : 'vlStart_on',\r\n    VL_MIDDLE_ON_FILE_NAME : 'vlMiddle_on',\r\n    VL_END_ON_FILE_NAME : 'vlEnd_on',\r\n    VL_START_OFF_FILE_NAME:'vlStart_off',\r\n    FLOOR_FILE_NAME : 'floor',\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 케릭터 방향 정보 (바라보고있는곳)\r\n    */\r\n    DIRECTION_UP: 'up',\r\n    DIRECTION_LEFT: 'left',\r\n    DIRECTION_RIGHT: 'right',\r\n    DIRECTION_DOWN: 'down',\r\n\r\n    /**\r\n     * 플레이어 방향\r\n     */\r\n    PLAYER_DEFAULT_UP: 0,\r\n    PLAYER_DEFAULT_DOWN: 1,\r\n    PLAYER_DEFAULT_LEFT:2,\r\n    PLAYER_DEFAULT_RIGHT:3,\r\n\r\n\r\n    /**\r\n     * 플레이어 애니메이션 정보를 저장하고있음.\r\n     */\r\n    ANIMATION_LEFT: \"leftRun\",\r\n    ANIMATION_RIGHT: \"rightRun\",\r\n    ANIMATION_UP: \"upRun\",\r\n    ANIMATION_DOWN: \"downRun\",\r\n    ANIMATION_IDLE_LEFT: \"left_idle\",\r\n    ANIMATION_IDLE_RIGHT: \"right_idle\",\r\n    ANIMATION_IDLE_UP: \"idle_back\",\r\n    ANIMATION_IDLE_DOWN: \"idle_front\",\r\n\r\n    ANIMATION_LEFT_HIT : \"hit_left\",\r\n    ANIMATION_RIGHT_HIT : \"hit_right\",\r\n\r\n};\r\n","﻿\r\n\r\n\r\nconst Controller = require(\"../Controller\");\r\nconst SoundManger = require(\"./SoundManager\");\r\nconst Loader = require(\"./Loader\");\r\nconst SoundManager = require(\"./SoundManager\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        btnTest: cc.Button,\r\n        // 로딩 화면\r\n        loadingBG: cc.Node,\r\n\r\n        isLoaded : false,\r\n\r\n        // 코드가 현재 플레이중인 상태를 저장하는 변수\r\n        isPlay: false,\r\n\r\n        // 메인 카메라\r\n        camera : cc.Camera,\r\n\r\n        // 게임 시작전 강제로 포지션 오프셋값 주는 배열 변수\r\n        mapOffset : {\r\n            default:[],\r\n        },\r\n\r\n        // 현재 읽고 있는 id 값 뜻함.\r\n        idx: 0,\r\n\r\n        /**\r\n         * 실제 사용하는 객체 모음\r\n         */\r\n        // 맵 객체\r\n        gameMap: cc.TiledMap,\r\n        // 플레이어 객체\r\n        player : cc.Node,\r\n        // 우주선 파츠 부모 객체\r\n        //파츠는 해당 객체 아래에 추가됨.\r\n        spaceShip : cc.Node,\r\n        // 배경화면 뿌려지는곳.\r\n        bgNode: cc.Node,\r\n\r\n        // Floor 객체 Parent\r\n        floorParent : cc.Node,\r\n\r\n\r\n        //플레이어, 맵을 제외한 월드에 위치 하는 객체를 담는 배열\r\n        item: [],\r\n\r\n        // 드롭 아이템 리스트\r\n        dropItemList: [],\r\n        // 드롭스위치 리스트\r\n        dropSwitchList:[],\r\n\r\n        // 게임 최종도착지\r\n        goalObject: cc.Node,\r\n\r\n        // 객체노드.\r\n        objectParent: cc.Node,\r\n\r\n        effectParent: cc.Node,\r\n\r\n        audioManager: cc.Node,\r\n\r\n\r\n\r\n        // 픽업 이펙트 담는 리스트\r\n        pList : [],\r\n        pIdx : 0,\r\n\r\n        // 회복 이펙트 담는 리스트\r\n        hList : [],\r\n        hIdx : 0,\r\n\r\n        // 이펙트 담는 리스트\r\n        expList: [],\r\n        expIdx : 0,\r\n\r\n        // 아이템 떨어질때 이펙트 리스트\r\n        dropEffectList: [],\r\n        dropEffectIdx : 0,\r\n\r\n\r\n        // 폭발 이펙트 중인지 체크\r\n        isPlayExplosion : false,\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * 게임에서 사용될 이미지로드 SingleTon 로드가 된걸 확인한 뒤\r\n     * 로딩 화면을 감춰주는 Interval 생성\r\n     */\r\n    onLoad(){\r\n        this.loadingBG.active = true;\r\n\r\n        /**\r\n         * + 이미지 및 맵까지 로드가 되면 로딩을 푸느게 좋지않을까 (추후 조정.)\r\n         */\r\n        var self = this;\r\n        var inter = setInterval(function(){\r\n            if(Loader.getInstance().GetImage(0) != null){\r\n                clearInterval(inter);\r\n\r\n                self.InitGame();\r\n                //self.LoadingFadeOut();\r\n            }\r\n        },90);\r\n\r\n    },\r\n\r\n    start(){\r\n        /**\r\n         * 오디오 로드 테스함.\r\n         * @type {number}\r\n         */\r\n        var audioInter = setInterval(()=>{\r\n\r\n            if(SoundManger.getInstance().IsLoadCheck() != null){\r\n                clearInterval(audioInter);\r\n            }\r\n        },30);\r\n\r\n    },\r\n\r\n    /**\r\n     * 큰 타일맵 로드시 맵이 짤려보여는 현상을 해결하기 위해 맵을 2초에 걸쳐 맵을 좌우로 이동시켜주는 효과\r\n     * 해당 효과로 맵 랜더링 오류가 해결\r\n     */\r\n    _TileMapShake: function(){\r\n        var s = this;\r\n        setTimeout(function(){\r\n            s.CameraMoveX(1);\r\n        },1000);\r\n\r\n        setTimeout(function(){\r\n\r\n           s.CameraMoveX(-1);\r\n        },2000);\r\n    },\r\n\r\n    /**\r\n     * mapShake\r\n     * @param idx\r\n     * @constructor\r\n     */\r\n    CameraMoveX : function(idx){\r\n        const currentPosition = this.camera.node.position;\r\n        const newXPosition = currentPosition.x - idx;\r\n\r\n        var v3 = cc.v3(newXPosition, currentPosition.y, currentPosition.z);\r\n\r\n        this.camera.node.setPosition(v3);\r\n    },\r\n\r\n\r\n    /**\r\n     * 로딩 검은 화면 FadeOut 해주는 함수.\r\n     * Init관련된건 이미 처리하고 Fade out 처리해줌.\r\n     * @constructor\r\n     */\r\n    LoadingFadeOut: function(){\r\n        var self = this;\r\n        var offset = 3;\r\n        setTimeout(()=>{\r\n            var loadingInterval = setInterval(function(){\r\n\r\n                if(self.loadingBG.opacity <= 0){\r\n                    self.loadingBG.active = false;\r\n                    self.isLoaded = true;\r\n                    clearInterval(loadingInterval);\r\n                }\r\n                self.loadingBG.opacity -= offset;\r\n            },30);\r\n        },1000);\r\n    },\r\n\r\n\r\n    /**\r\n     * 게임 초기화 해주는 함수입니다.\r\n     * @constructor\r\n     */\r\n    InitGame: function(){\r\n        var self = this;\r\n\r\n        this.mapOffset = [\r\n            // T-1\r\n            { x: 0, y: 2 },\r\n            // T-2\r\n            { x: 0, y: 1 },\r\n            // 1-1-E\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-1-N\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-1-H\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n\r\n            // 1-2-E\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-2-N\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-2-H\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n\r\n            // 1-3-E\r\n            { x: 2, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n\r\n            // 1-3-N\r\n            { x: 0, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n\r\n            //1-3-H\r\n            { x: 0, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n        ];\r\n        this.loadInit();\r\n    },\r\n\r\n    /**\r\n     *  Json 데이터가 로드가 정상적으로 되었는지 Interval을 이용하여 확인한다.\r\n     */\r\n    loadInit: function(){\r\n\r\n        var self = this;\r\n        // Interver 이용하여 로드 체크한다.\r\n        var inter = setInterval(function(){\r\n\r\n            if(Controller.getInstance().initJson != null){\r\n                self.EffectInit();\r\n                self.InitMap();\r\n                // self.InitFloor();\r\n                self.InitPlayer();\r\n                self.InitObject();\r\n\r\n                // 카메라 초기화\r\n                self.InitialCamera();\r\n\r\n                self.LoadingFadeOut();\r\n                clearInterval(inter);\r\n            }\r\n\r\n        }, 100);\r\n    },\r\n\r\n\r\n    /**\r\n     *  게임 Update 코드 상태값을 확인하여 코드를 동작시키는 함수\r\n     *  0 값이면 동작하지않고,\r\n     *  1 이면 동작하도록 Controller Status 값으로 확인.\r\n     * @param dt\r\n     */\r\n    update(dt){\r\n        if(!this.isLoaded) return;\r\n\r\n        var status = Controller.getInstance().GetStatus();\r\n        if(status){\r\n            this.OnCodePlay();\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어 초기화 해주는 함수 입니다.\r\n     * @constructor\r\n     */\r\n    InitPlayer: function(){\r\n        var initPlayerObject = Controller.getInstance().getInitPlayerData();\r\n\r\n        var initPos = initPlayerObject.pos;\r\n        var playerDir = initPlayerObject.dir;\r\n        var initHp = initPlayerObject.hp;\r\n        var playerStatus = initPlayerObject.status;\r\n        var foodCount = initPlayerObject.food_count;\r\n        var rocket_parts_count = initPlayerObject.rocket_parts_count;\r\n\r\n        var self = this;\r\n\r\n        var initvector = this.GVector(initPos[0],initPos[1]);\r\n        //var initvector = this.GVector(0,0);\r\n\r\n        // 2.3.x 버전\r\n        cc.loader.loadRes('./prefabs/Player', cc.Prefab, function (err, prefab) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            // 로드된 SpriteFrame 사용\r\n            self.player = cc.instantiate(prefab);\r\n            self.player.getComponent(\"Player\").Init(initvector, playerDir);\r\n\r\n            // 현재 스크립트가 추가되어 있는 노드에 플레이어 노드를 추가합니다.\r\n            self.node.addChild(self.player);\r\n        });\r\n    },\r\n\r\n    /**\r\n     *\r\n     * Json coordination -> Cocos game Coordination\r\n     *\r\n     * 실제 게임 벡터로 변환 해주는 함수\r\n      * @param x 입력되는 X좌표 값입니다.\r\n     *  @param y 입력되는 Y좌표 값입니다.\r\n     * @constructor\r\n     */\r\n    GVector : function (x, y) {\r\n\r\n        var lX = x * 1;\r\n        var lY = y * -1;\r\n\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n        var gameLevel = this.ConvertGameLevel(step,diff,level);\r\n\r\n\r\n        var v2 = cc.v2(\r\n            ((lX + this.mapOffset[gameLevel].x) * Env.OFFSET_X) + Env.PLAYER_RADIO,\r\n            ((lY - this.mapOffset[gameLevel].y) * Env.OFFSET_Y) - Env.PLAYER_RADIO\r\n        );\r\n        return v2;\r\n    },\r\n\r\n    /**\r\n     * Json 정보를 토대로 맵 오프셋값을 가져옵니다.\r\n     * @param step json 단계\r\n     * @param diff json 난이도  Easy , Normal , Hard\r\n     * @param level Json 레벨\r\n     * @returns {number}  컨버팅된 게임 레벨값\r\n     * @constructor\r\n     */\r\n    ConvertGameLevel: function(step,diff,level){\r\n\r\n        var gameLevel = 0;\r\n\r\n        if(step === \"tutorial\"){\r\n            gameLevel =  level - 1;\r\n        }\r\n        else{\r\n            // 1-1-E\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 1){ gameLevel = 2; }\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 2){ gameLevel = 3; }\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 3){ gameLevel = 4; }\r\n\r\n            // 1-1-N\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 1){ gameLevel = 5; }\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 2){ gameLevel = 6; }\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 3){ gameLevel = 7; }\r\n\r\n            // 1-1-H\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 1){ gameLevel = 8; }\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 2){ gameLevel = 9; }\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 3){ gameLevel = 10; }\r\n\r\n            // 1-2-E\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 1){ gameLevel = 11; }\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 2){ gameLevel = 12; }\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 3){ gameLevel = 13; }\r\n\r\n            // 1-2-N\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 1){ gameLevel = 14; }\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 2){ gameLevel = 15; }\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 3){ gameLevel = 16; }\r\n\r\n            // 1-2-H\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 1){ gameLevel = 17; }\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 2){ gameLevel = 18; }\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 3){ gameLevel = 19; }\r\n\r\n            // 1-3-E\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 1){ gameLevel = 20; }\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 2){ gameLevel = 21; }\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 3){ gameLevel = 22; }\r\n\r\n            // 1-3-N\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 1){ gameLevel = 23; }\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 2){ gameLevel = 24; }\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 3){ gameLevel = 25; }\r\n\r\n            // 1-3-H\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 1){ gameLevel = 26; }\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 2){ gameLevel = 27; }\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 3){ gameLevel = 28; }\r\n        }\r\n        return gameLevel;\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵정보를 로드하고, 초기화 합니다.\r\n     * @constructor\r\n     */\r\n    InitMap: function(){\r\n        var mapurl = this.GetMapURL();\r\n        var self = this;\r\n\r\n        var url = \"./map/\" + mapurl;\r\n\r\n        // // 2.3.x 버전\r\n        cc.loader.loadRes(url, cc.TiledMapAsset, function (err, tmx_file) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            self.gameMap.tmxAsset = tmx_file;\r\n\r\n            /**\r\n             * 아래 에서 맵사이즈를 계산하여 해당 포지션 만큼 카메라 포지션 셋팅해줍니다.\r\n             */\r\n            var mapSize = self.gameMap.getMapSize();\r\n            var tileSize = self.gameMap.getTileSize();\r\n\r\n            var mapWidth = mapSize.width * tileSize.width;\r\n            var mapHeight = mapSize.height * tileSize.height;\r\n\r\n            var v2 = cc.v2(-mapWidth*1.5, -mapHeight*3);\r\n\r\n            self.gameMap.node.setPosition(0,-mapHeight * 3);\r\n            self._TileMapShake();\r\n        });\r\n    },\r\n\r\n\r\n    /**\r\n     * Json Stage 정보를 토대로 저장된 맵 프리팹 url 리턴합니다.\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    GetMapURL : function(){\r\n        var url = \"\";\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var map  = stageObject.map;\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n\r\n        if(step === \"tutorial\"){\r\n\r\n            url = \"map_T-\"+level.toString();\r\n        }\r\n        else{\r\n            var cLevel = \"Easy\";\r\n            switch (diff){\r\n                case \"Easy\": cLevel = \"E\"; break;\r\n                case \"Normal\" : cLevel = \"N\"; break;\r\n                case \"Hard\" : cLevel = \"H\"; break;\r\n            }\r\n            url = \"map_\"+step.toString() + \"-\" + cLevel + \"-\" + level.toString();\r\n        }\r\n        return url;\r\n    },\r\n\r\n\r\n    /**\r\n     * 카메라 포지션을 조정합니다.\r\n     * @constructor\r\n     * @param x X좌표\r\n     * @param y Y좌표\r\n     */\r\n    SetCamera : function(x = 0, y = 0, zoomLevel = 1.5){\r\n        // 메인 카메라의 포지션 설정\r\n        this.camera.node.setPosition(cc.v3(x, y, 0)); // 여기서 x, y, z는 포지션의 좌표값입니다.\r\n        this.camera.zoomRatio = zoomLevel;\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵의 갯수가 많지 않으니 강제로\r\n     * 카메라 포지셔닝\r\n     * @constructor\r\n     */\r\n    InitialCamera: function() {\r\n\r\n        // Default option\r\n        // -600 -860  1\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n        var gameLevel = this.ConvertGameLevel(step,diff,level);\r\n\r\n        this.spaceShip.active = false;\r\n\r\n        switch (gameLevel){\r\n            case 0 : case 1:\r\n                this.SetCamera(-600,-860,1);\r\n                break;\r\n            case 2: case 3:\r\n            case 5: case 6:\r\n            case 8: case 9:\r\n                this.SetCamera(-500,-950,1);\r\n                break;\r\n            case 4: case 7: case 10:\r\n                this.SetCamera(-500,-1060,1);\r\n                break;\r\n\r\n            case 11: case 14: case 17:\r\n                this.SetCamera(-300,-1200,0.75);\r\n                break;\r\n            case 12: case 15: case 18:\r\n                this.SetCamera(250,-1350,0.65);\r\n                break;\r\n            case 13: case 16: case 19:\r\n                this.SetCamera(550,-1350,0.6);\r\n                break;\r\n\r\n            case 20: case 23: case 26:\r\n                this.SetCamera(140,-900,0.8);\r\n                this.spaceShip.setPosition(cc.v2(-2600,-250));\r\n                this.spaceShip.active = true;\r\n                break;\r\n            case 21: case 24: case 27:\r\n                this.SetCamera(350,-900,0.7);\r\n                this.spaceShip.setPosition(cc.v2(-200,-250));\r\n                this.spaceShip.active = true;\r\n                break;\r\n\r\n            case 22: case 25: case 28:\r\n                this.SetCamera(350,-1300,0.7);\r\n                this.spaceShip.setPosition(cc.v2(4000,-250));\r\n                this.spaceShip.active = true;\r\n                break;\r\n        }\r\n        //this.camera.node.setPosition()\r\n    },\r\n\r\n\r\n    /**\r\n     * 이펙트 초기화 해주는 함수\r\n     * @constructor\r\n     */\r\n    EffectInit: function(){\r\n        var self = this;\r\n        var url = '/prefabs/explosion';\r\n        var healUrl = \"/prefabs/heal\";\r\n        var pickUrl = \"/prefabs/pickup\";\r\n        var dropEffectUrl = \"/prefabs/dropEffect\";\r\n\r\n\r\n        for(var i = 0; i < 5; i++) {\r\n            cc.loader.loadRes(url, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n                self.effectParent.addChild(n1);\r\n\r\n                self.expList.push(n1);\r\n\r\n            });\r\n\r\n            cc.loader.loadRes(healUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n\r\n                self.hList.push(n1);\r\n\r\n            });\r\n\r\n            cc.loader.loadRes(pickUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n                self.pList.push(n1);\r\n\r\n            });\r\n\r\n\r\n            cc.loader.loadRes(dropEffectUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n                self.dropEffectList.push(n1);\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 폭발 이펙트 보여줌.\r\n     * @param pos  포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowExplosion: function(pos){\r\n\r\n        if(this.expIdx >= this.expList.length-1  ) this.expIdx = 0;\r\n        this.expList[this.expIdx].active = true;\r\n\r\n        this.expList[this.expIdx].setPosition(pos);\r\n\r\n        var animation = this.expList[this.expIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n\r\n            if(self.expList[self.expIdx].active){\r\n                self.expList[self.expIdx].active = false;\r\n                self.expIdx++;\r\n            }\r\n\r\n        },this);\r\n\r\n        animation.play(\"explosion\");\r\n    },\r\n\r\n    /**\r\n     * 아이템이 회복 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowHeal: function(pos){\r\n\r\n        if(this.hIdx >= this.hList.length-1  ) this.hIdx = 0;\r\n\r\n        this.hList[this.hIdx].active = true;\r\n        this.hList[this.hIdx].setPosition(pos);\r\n\r\n        var animation = this.hList[this.hIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n            if(self.hList[self.expIdx].active) {\r\n                self.hList[self.hIdx].active = false;\r\n                self.hIdx++;\r\n            }\r\n        },this);\r\n\r\n        animation.play(\"heal\");\r\n        this.hList[this.hIdx].getComponent(cc.Animation).play(\"heal\");\r\n    },\r\n\r\n    /**\r\n     * 아이템이 획득 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowPickup: function(pos){\r\n\r\n        if(this.pIdx >= this.pList.length-1  ) this.pIdx = 0;\r\n\r\n        this.pList[this.pIdx].active = true;\r\n        this.pList[this.pIdx].setPosition(pos);\r\n\r\n        var animation = this.pList[this.pIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n            if(self.pList[self.pIdx].active){\r\n                self.pList[self.pIdx].active = false;\r\n                self.pIdx++;\r\n            }\r\n\r\n        },this);\r\n        SoundManager.getInstance().PlaySfx(Env.SFX_EARN_ITEM);\r\n        animation.play(\"pickup\");\r\n    },\r\n\r\n\r\n    /**\r\n     * 아이템이 드롭될때 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowDropEffect: function(pos){\r\n\r\n        if(this.dropEffectIdx >= this.dropEffectList.length-1 ) this.dropEffectIdx = 0;\r\n\r\n        this.dropEffectList[this.dropEffectIdx].active = true;\r\n\r\n        this.dropEffectList[this.dropEffectIdx].setPosition(pos);\r\n\r\n        var animation = this.dropEffectList[this.dropEffectIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n\r\n            if(self.dropEffectList[self.dropEffectIdx].active){\r\n                self.dropEffectList[self.dropEffectIdx].active = false;\r\n                self.dropEffectIdx++;\r\n            }\r\n\r\n        },this);\r\n\r\n        animation.play(\"dropeffect\");\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵위에 출력될 객체 초기화합니다.\r\n     * @constructor \r\n     */\r\n    InitObject: function() {\r\n\r\n        var goalList = Controller.getInstance().getInitStageData().goal_list;\r\n        this.MakeGoal(goalList);\r\n\r\n        var objects = Controller.getInstance().getInitOjbectDatas();\r\n\r\n        if (objects.length < 1) {\r\n            console.log(\"item list is Null\");\r\n            return;\r\n        } else {\r\n            for (var i = 0; i < objects.length; i++) {\r\n                this.MakeUpObject(objects[i]);\r\n            }\r\n        }\r\n//        console.log(this.item[0].getComponent(\"Gobject\").GetItemID());\r\n\r\n    },\r\n\r\n    /**\r\n     * 골 지점 객체를 생성합니다.\r\n     * @param object 골객체 관련.\r\n     * @constructor\r\n     */\r\n    MakeGoal: function(object){\r\n        for(var j = 0; j < object.length; j++){\r\n            if(object[j].goal === \"target\"){\r\n                var targets = object[j];\r\n                var goalPos = cc.v2(targets.pos[0], targets.pos[1]);\r\n                this.AddPrefabs(Env.GOAL, -1, goalPos);\r\n                break;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 객체를 만드는 것.\r\n      * @param type\r\n     * @constructor\r\n     */\r\n    MakeUpObject: function(object){\r\n        var type = object.type;\r\n\r\n        if(type === \"laser\"){\r\n\r\n            var id = object.id;\r\n            var dir = object.dir;\r\n            var startX = object.pos_start[0];\r\n            var startY = object.pos_start[1];\r\n            var status = object.status;\r\n\r\n            var startPos = cc.v2(startX, startY);\r\n            this.AddLaserPrefab(Env.LASER_START_ON, id, startPos , status , dir );\r\n\r\n\r\n\r\n            var endX = object.pos_end[0];\r\n            var endY = object.pos_end[1];\r\n\r\n            var endPos = cc.v2(endX, endY);\r\n            this.AddLaserPrefab(Env.LASER_END_ON, id, endPos, status, dir );\r\n\r\n            /**\r\n             * 중간 레이저 포인터 가져오기.\r\n             */\r\n            if(dir === 'h'){\r\n                // 가로\r\n                for(var i = startX+1 ; i < endX ; i++){\r\n                    var p = cc.v2(i, startY);\r\n                    this.AddLaserPrefab(Env.LASER_MIDDLE_ON, id, p , status, dir);\r\n                }\r\n            }\r\n            else if(dir === \"v\"){\r\n                // 세로\r\n                for(var i = startY+1 ; i < endY ; i++){\r\n                    var p = cc.v2(startX, i);\r\n                    this.AddLaserPrefab(Env.LASER_MIDDLE_ON, id, p , status, dir);\r\n                }\r\n            }\r\n        }\r\n        else if(type === 'drop_switch'){\r\n            // drop Switch\r\n            var switchId = object.id;\r\n            var switchTag = this.NameToTag(object.type);\r\n            var switchX = object.pos[0];\r\n            var switchY = object.pos[1];\r\n\r\n            var switchPos = cc.v2(switchX, switchY);\r\n\r\n            var dropX = object.pos_drop[0];\r\n            var dropY = object.pos_drop[1];\r\n            var dropType = object.drop_type;\r\n            var dropItemTag = this.NameToTag(dropType);\r\n\r\n            var dropItemPos = cc.v2(dropX, dropY);\r\n            this.AddDropSwitchPrefabs(switchTag, switchId, switchPos, dropItemTag,  dropItemPos )\r\n\r\n        }\r\n        else{\r\n\r\n            var tag = this.NameToTag(object.type);\r\n\r\n            var posX = object.pos[0];\r\n            var posY = object.pos[1];\r\n            var itemId = object.id;\r\n            var pos = cc.v2(posX, posY);\r\n\r\n\r\n            if(tag === Env.ROCKET_EMPTY){\r\n                this.AddRocketParts(tag,itemId,pos, object);\r\n            }\r\n            else{\r\n                this.AddPrefabs(tag, itemId,  pos );\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 입력된 String 값을 게임에서 사용되는 태그로바꿔주는 함수\r\n     * @param str 입력된 Json type값\r\n     * @constructor\r\n     */\r\n    NameToTag: function(str){\r\n\r\n        switch(str){\r\n            case \"food\" : return Env.FOOD;\r\n            case \"bomb\": return Env.BOMB;\r\n            case \"rocket_parts\" : return Env.BATTERY;\r\n            case \"drop_switch\" : return Env.NORMAL_SWITCH_ON;\r\n            case \"laser_switch\": return Env.LASER_SWITCH_ON;\r\n            case \"engines\": case \"solid_propellant\": case \"liquid_fuel\":  return Env.ROCKET_EMPTY;\r\n        }\r\n    },\r\n\r\n    AddRocketParts: function(tag, id, pos, object){\r\n        var prefabName = \"rocketParts\";\r\n        var self = this;\r\n\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag,id);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n\r\n            n1.opacity = 100;\r\n\r\n            switch (object.require_dir){\r\n                case \"up\": n1.rotation = 0; break;\r\n                case \"down\": n1.rotation = -180; break;\r\n                case \"left\": n1.rotation = -90; break;\r\n                case \"right\": n1.rotation = 90; break;\r\n            }\r\n\r\n            self.item.push(n1);\r\n            // self.node.addChild(n1);\r\n            self.objectParent.addChild(n1);\r\n            self.objectParent.setLocalZOrder = 10;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 프리팹을 생성해줍니다.\r\n     * @param tag  객체의 태그값 Env 전역넘버\r\n     * @param id  Json 에서 불러온 id 값\r\n     * @param pos  cc.v2 포지션값\r\n     * @constructor\r\n     */\r\n    AddPrefabs: function(tag , id , pos ){\r\n        var prefabName = \"\";\r\n        var self = this;\r\n\r\n        // 태그값에 해당하는 프리팹 이름 가져옴.\r\n        switch (tag){\r\n            case Env.FOOD : prefabName = \"food\";    break;\r\n            case Env.NORMAL_SWITCH_ON : case Env.NORMAL_SWITCH_OFF : prefabName = \"nSwitch\";  break;\r\n            case Env.LASER_SWITCH_ON : case Env.LASER_SWITCH_OFF : prefabName = \"lSwitch\"; break;\r\n            case Env.BATTERY : prefabName = \"battery\"; break;\r\n            case Env.BOMB : prefabName = \"bomb\"; break;\r\n            case Env.ROCKET_EMPTY : case Env.ROCKET_FILLED : prefabName = \"rocketParts\";  break;\r\n            case Env.GOAL : prefabName = \"goal\"; break;\r\n            case Env.FLOOR: prefabName = \"floor\"; break;\r\n        }\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag,id);\r\n\r\n            if(tag === Env.GOAL){\r\n                self.goalObject = n1;\r\n                self.node.addChild(n1);\r\n            }\r\n            else{\r\n                self.item.push(n1);\r\n                self.node.addChild(n1);\r\n\r\n            }\r\n        });\r\n    },\r\n\r\n    AddDropSwitchPrefabs : function(tag, id, pos , drop_item_tag, drop_item_pos){\r\n        var self = this;\r\n        var dropSwitchPrefabs = \"nSwitch\";\r\n        var dropItemPrefabs = \"battery\";\r\n\r\n        var switchUrl = \"./prefabs/\" + dropSwitchPrefabs;\r\n\r\n        cc.loader.loadRes(switchUrl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag, id);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n\r\n            self.dropSwitchList.push(n1);\r\n        });\r\n\r\n        var dropUrl = './prefabs/' + dropItemPrefabs;\r\n        cc.loader.loadRes(dropUrl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(drop_item_tag, id);\r\n            n1.getComponent(\"Gobject\").DropItemHide();\r\n\r\n\r\n            var v1 = self.GVector(drop_item_pos.x,drop_item_pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n\r\n            self.dropItemList.push(n1);\r\n\r\n        });\r\n    },\r\n\r\n\r\n    /**\r\n     * 레이저 객체 프리팹을 만들어주는 함수\r\n     * @param tag  레이저 태그\r\n     * @param id  id\r\n     * @param pos  방향\r\n     * @constructor\r\n     */\r\n    AddLaserPrefab: function(tag, id, pos , status, dir){\r\n        var prefabName = \"laser\";\r\n        var self = this;\r\n\r\n\r\n        // 레이저 중간 객체라면 아래처럼 이미지 교체.\r\n        if(tag === Env.LASER_MIDDLE_ON)  prefabName = \"laserMiddle\";\r\n\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n            var n1 = cc.instantiate(prefabs);\r\n\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag, id);\r\n\r\n            var isStatus = false;\r\n\r\n\r\n            if(status === 0)  isStatus = false;\r\n            else  isStatus = true;\r\n\r\n            n1.getComponent(\"Gobject\").LaserInitial(tag,isStatus , dir);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n            self.item.push(n1);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * PYthon 코드 대로 동작을 실행합니다.\r\n     * 실제 플레이어 및  모든 객체 상태를 변화를 줍니다.\r\n     * 단 return 값을 false 하면 이동종료를 뜻합니다.\r\n     * @returns {boolean}\r\n     */\r\n    executeCommand: function(id = 0){\r\n        var command = Controller.getInstance().getCommandLine(id);\r\n\r\n\r\n        /**\r\n         * 명령어 종료를 뜻함\r\n         */\r\n        if(command === -1) return false;\r\n        if(command.status === 1) return false;\r\n\r\n        // 객체 상태값 업데이트\r\n        this.ObjectUpdate(command.item_list);\r\n\r\n        // 플레이어 상태값\r\n        var playerStatus = command.player.status;\r\n\r\n\r\n        var convertPos = this.GVector(command.player.pos[0], command.player.pos[1]);\r\n        this.EffectControl(playerStatus, convertPos);\r\n\r\n        this.player.getComponent(\"Player\").setPlayerStatus(playerStatus);\r\n        this.player.getComponent(\"Player\").setDirection(command.player.dir);\r\n        this.player.getComponent(\"Player\").Movement(convertPos);\r\n        return true;\r\n    },\r\n\r\n    EffectControl: function(status , pos){\r\n        var self = this;\r\n\r\n        if(status === 11){\r\n            this.ShowExplosion(pos);\r\n        }\r\n        else if( status === 3){\r\n            this.ShowPickup(pos);\r\n        }\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * 스트림 데이터를 입력받아 맵위에 있는 객체의 상태를 변화 하거나\r\n     * Sprite를 변경해주는 업데이트 함수.\r\n     * @param id_list\r\n     * @constructor\r\n     */\r\n    ObjectUpdate: function(id_list) {\r\n        // 비어 있다면 실행하지 않습니다.\r\n        if(id_list.length < 1) return;\r\n\r\n        for(var i = 0; i < id_list.length; i++){\r\n            // 아이템 스테이터스 업데이트\r\n            this.ItemStatusUpdate(i, id_list[i]);\r\n            // Drop Switch UPdate\r\n            this.DropSwitchUpdate(i, id_list[i]);\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 드롭 스위치 의 상태를 표현해주는 함수입니다.\r\n     * @param index  현재 상태 리스트\r\n     * @param status 상태값을 찾습니다.\r\n     * @constructor\r\n     */\r\n    DropSwitchUpdate: function(index, status){\r\n        // 드랍 스위치가 아닌경우\r\n        for(var i = 0; i < this.dropSwitchList.length; i++){\r\n            var dropSwitch = this.dropSwitchList[i].getComponent(\"Gobject\");\r\n\r\n            var dropSwitchId = dropSwitch.GetItemID();\r\n\r\n\r\n            if(dropSwitchId === index && status === 0){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n\r\n                if(dropItem.active === false){\r\n                    this.ShowDropEffect(dropItem.position);\r\n                }\r\n                itemComp.DropItemShow();\r\n                // this.audioManager.getComponent('SoundManager').Play(Env.SFX)\r\n                dropSwitch.Hide();\r\n\r\n            }\r\n            else if(dropSwitchId === index && status === 1){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Hide();\r\n\r\n                itemComp.DropItemHide();\r\n\r\n                dropSwitch.Hide();\r\n\r\n            }\r\n            else if(dropSwitchId === index && status === 2){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Show();\r\n                itemComp.DropItemShow();\r\n\r\n                dropSwitch.Show();\r\n            }\r\n            else if(dropSwitchId === index && status === 3){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Hide();\r\n\r\n                itemComp.DropItemHide();\r\n\r\n                dropSwitch.Show();\r\n\r\n            }\r\n        }\r\n    },\r\n\r\n    FindDropItem: function(id){\r\n      for( var i = 0; i <  this.dropItemList.length; i++){\r\n          if(this.dropItemList[i].getComponent(\"Gobject\").GetItemID() === id) return this.dropItemList[i];\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * 아이템 상태를 관리해주는 함수\r\n     *\r\n     * @param index 아이템 인덱스값을 받음\r\n     * @param status 상태는 스트림데이터로 넘어오는 아이템들 리스트 임.\r\n     * @constructor\r\n     */\r\n    ItemStatusUpdate: function(index, status){\r\n\r\n\r\n        for(var i = 0; i < this.item.length; i++){\r\n            var itemObject = this.item[i].getComponent(\"Gobject\");\r\n\r\n            var itemID = itemObject.GetItemID();\r\n            var itemTag = itemObject.GetItemTag();\r\n            if(itemID === index && status === 0){\r\n                itemObject.Hide();\r\n            }\r\n            else if(itemObject.GetItemID() === index && status === 1){\r\n                itemObject.Show();\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Json에서 읽어온 코드 뭉치를 게임에 적용하여 플레이 합니다.\r\n     * 실제 사용되는 함수입니다.\r\n     * @constructor\r\n     */\r\n    OnCodePlay: function(){\r\n        if(this.isPlay) return;\r\n        var self = this;\r\n        this.isPlay = true;\r\n\r\n        this.idx = Controller.getInstance().GetProgressId();\r\n\r\n\r\n        var inter = setInterval(function(){\r\n            if(self.executeCommand(self.idx) === false){\r\n                clearInterval(inter);\r\n                self.isPlay = false;\r\n                Controller.getInstance().SetStatus(false);\r\n            }\r\n            self.idx++;\r\n        }, 1000/60);\r\n    },\r\n});\r\n","﻿\r\nconst Controller = require(\"../Controller\");\r\n\r\nvar Loader = require(\"../GameLogic/Loader\");\r\nvar SoundManager = require(\"../GameLogic/SoundManager\");\r\n\r\n\r\nvar Gobject = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties : {\r\n        itemId : 0,\r\n        itemTAG : 0,\r\n        isStatusChange : false,\r\n        laser_direction : 'h',\r\n    },\r\n\r\n    /**\r\n     * 태그값은 Env에 Loader Singleton 변수 선언되어있습니다.\r\n     * 정수값을 받아 최초 이미지 변경\r\n     * 태그값을 받아 객체의 이미지를 변경합니다.\r\n     * @param TAG\r\n     * @constructor\r\n     */\r\n    Init: function(TAG, id){\r\n        this.ChangeSprite(TAG);\r\n        this.itemId = id;\r\n        this.itemTAG = TAG;\r\n\r\n        this.isStatusChange = true;\r\n\r\n        if(TAG === Env.FOOD ){\r\n            this.node.getChildByName(\"gliter\").getComponent(cc.Animation).play(\"gliter\");\r\n        }\r\n        else if(TAG === Env.GOAL){\r\n            console.log(\"GOAL HI\");\r\n            this.node.getComponent(cc.Animation).play(\"goal\");\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *  객체의 최초 설정된 태그값을 리턴.\r\n     * @constructor\r\n     */\r\n    GetItemTag: function(){\r\n        return this.itemTAG;\r\n    },\r\n\r\n    /**\r\n     * 아이템 아이디값을 리턴\r\n     * @returns {number|*}  아이템 ID\r\n     * @constructor\r\n     */\r\n    GetItemID: function(){\r\n        return this.itemId;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * 레이저 객체에서 최초 초기화 하는방식.\r\n     * @param TAG Raser Tag\r\n     * @param isOn 켜져있는지 꺼져있는지 체크.\r\n     * @constructor\r\n     */\r\n    LaserInitial : function(TAG, isOn = false , direction){\r\n        this.laser_direction = direction;\r\n\r\n        if(direction === 'h'){\r\n            if(isOn){\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.LASER_START_ON);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.LASER_MIDDLE_ON);\r\n\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.ChangeSprite(Env.LASER_END_ON);\r\n                }\r\n            }\r\n            else{\r\n                this.isStatusChange = true;\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.LASER_START_OFF);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = false;\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.ChangeSprite(Env.LASER_END_OFF);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if(isOn){\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.VLASER_START_ON);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.VLASER_MIDDLE_ON);\r\n\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.VLASER_END_ON);\r\n                }\r\n            }\r\n            else{\r\n                this.isStatusChange = true;\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.VLASER_START_OFF);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = false;\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.node.active = false;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * 객체를 숨깁니다.\r\n     * 객체를 보여주려면 .Show()를 사용하세요\r\n     * @constructor\r\n     */\r\n    Hide: function(){\r\n        if(this.isStatusChange === false) return;\r\n\r\n        this.isStatusChange = false;\r\n        if(this.itemTAG === Env.LASER_START_ON ){\r\n\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_START_OFF);\r\n            }\r\n            else{\r\n                this.ChangeSprite(Env.VLASER_START_OFF);\r\n            }\r\n            //레이저 시작점\r\n        }\r\n        else if(this.itemTAG === Env.LASER_END_ON){\r\n            // 레이저 끝점\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_END_OFF);\r\n            }\r\n            else{\r\n                this.node.active = false;\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_SWITCH_ON){\r\n            // 레이저 스위치\r\n\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_LASER_BUTTON);\r\n\r\n            this.ChangeSprite(Env.LASER_SWITCH_OFF);\r\n        }\r\n        else if(this.itemTAG === Env.ROCKET_EMPTY){\r\n            // 로켓 파츠 처리\r\n            this.ChangeSprite(Env.ROCKET_EMPTY);\r\n        }\r\n        else if(this.itemTAG === Env.NORMAL_SWITCH_ON){\r\n            this.ChangeSprite(Env.NORMAL_SWITCH_OFF);\r\n        }\r\n        else{\r\n            if(this.node.active === false)  return;\r\n\r\n            if(this.itemTAG === Env.BOMB){\r\n                SoundManager.getInstance().PlaySfx(Env.SFX_BOMB);\r\n            }\r\n            this.node.active = false;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 객체를 보여줍니다.\r\n     * 객체를 감추려면 .Hide()를 사용하세요\r\n     * @constructor\r\n     */\r\n    Show: function(){\r\n        if(this.isStatusChange) return;\r\n        this.isStatusChange = true;\r\n\r\n\r\n        if(this.itemTAG === Env.LASER_START_ON ){\r\n            // 레이저 시작점.\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_START_ON);\r\n            }\r\n            else{\r\n                this.ChangeSprite(Env.VLASER_START_ON);\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_END_ON){\r\n            // 레이저 끝점\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_END_ON);\r\n            }\r\n            else{\r\n                this.node.active = true;\r\n                this.ChangeSprite(Env.VLASER_MIDDLE_ON);\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_SWITCH_ON){\r\n            // 레이저 스위치\r\n            this.ChangeSprite(Env.LASER_SWITCH_ON);\r\n        }\r\n        else if(this.itemTAG === Env.ROCKET_EMPTY){\r\n            // 로켓 파츠 처리\r\n            this.node.opacity = 255;\r\n            this.ChangeSprite(Env.ROCKET_FILLED);\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_PARTS_DOCKING);\r\n\r\n            this.ShowProofEffect();\r\n        }\r\n        else if(this.itemTAG === Env.NORMAL_SWITCH_ON){\r\n\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_DROP_SWITCH);\r\n            this.ChangeSprite(Env.NORMAL_SWITCH_ON);\r\n        }\r\n        else{\r\n            if(this.node.active === true) return;\r\n            this.node.active = true;\r\n        }\r\n    },\r\n\r\n    DropItemShow: function(){\r\n        if(this.node.active === true) return;\r\n        SoundManager.getInstance().PlaySfx(Env.SFX_DROP_ITEM);\r\n\r\n        this.node.active = true;\r\n    },\r\n\r\n    DropItemHide: function(){\r\n        if(this.node.active === false) return;\r\n\r\n        SoundManager.getInstance().PlaySfx(Env.SFX_EARN_ITEM);\r\n\r\n        this.node.active = false;\r\n    },\r\n\r\n\r\n\r\n    ShowProofEffect: function(){\r\n        var proofEffect = this.node.getChildByName(\"proof\");\r\n        proofEffect.active = true\r\n\r\n        var animation = proofEffect.getComponent(cc.Animation);\r\n\r\n        animation.on('finished', function () {\r\n            proofEffect.active = false;\r\n        }, this);\r\n        animation.play(\"proof\");\r\n\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * tag 값을 받아 sprite를 변경합니다.\r\n     * @param tag Env Tag값을 받습니다..\r\n     * @constructor\r\n     */\r\n    ChangeSprite: function(tag){\r\n        this.node.getComponent(cc.Sprite).spriteFrame = Loader.getInstance().GetImage(tag);\r\n    },\r\n\r\n});\r\n","﻿/**\r\n * Loader 클래스는 싱글턴 패턴 입니다.\r\n * Loader 클래스는 Sprite 최초로 모두 로드하고\r\n * 필요시 GetImage({Env.TAG}) 이용해 이미지를 가져옵니다.\r\n * @type {Function}\r\n */\r\nvar Loader = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!Loader._instance) {\r\n                Loader._instance = new Loader();\r\n                Loader._instance.init();\r\n            }\r\n            return Loader._instance;\r\n        },\r\n    },\r\n\r\n    properties: {\r\n        /**\r\n        * 초기화 상태값을 가지고 있습니다.\r\n        * false , 초기화 되지않음.\r\n        * true , 초기화 됨.\r\n        */\r\n        initStatus: false,\r\n        // Sprite 정보를 담고있는 배열입니다.\r\n        spr: [],\r\n        player_IMG : [],\r\n\r\n    },\r\n\r\n    init: function () {\r\n        console.log(\"Loaded Sprite\");\r\n        this._LoadImage();\r\n    },\r\n\r\n    /**\r\n     * 최초 객체가 생성될때 지정된 이미지를 읽어와 저장합니다.\r\n     * 단, 최초 1회만 진행합니다.\r\n     * 일반적으로 Loader 객체가 생성될때 1회 만 동작하도록 하고있습니다.\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    _LoadImage: function () {\r\n        if (this.initStatus) return false;\r\n        this.initStatus = true;\r\n\r\n        this.spr = new Array(Env.MAX_LOAD_IMAGE_LENGTH).fill(null);\r\n        this.player_IMG = new Array(4).fill(null);\r\n\r\n        var self = this;\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.FOOD_BOX_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n\r\n                console.log(Env.DIRECTORY_PATH+Env.FOOD_BOX_FILE_NAME);\r\n\r\n                self.spr[0] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.N_SWITCH_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[1] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.N_SWITCH_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[2]= spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_SWITCH_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[3] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_SWITCH_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[4] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.BATTERY_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[5] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.BOMB_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[6] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.ROCKET_EMPTY_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[7] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.ROCKET_FILLED_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[8] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_START_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[9] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_MIDDLE_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[10] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_END_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[11] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_START_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[12] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_END_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[13] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.GOAL_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[14] = spr;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_START_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[15] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_MIDDLE_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[16] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_END_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[17] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_START_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[18] = spr;\r\n            }\r\n        });\r\n        return true;\r\n    },\r\n\r\n\r\n    /**\r\n     * 메인으로 사용되는 함수입니다.\r\n     * 해당 함수는 매개변수로 ag값 받아\r\n     * Sprite를 리턴해주는 함수입니다.\r\n     * @param tag Env 에 저장되어 있는 Tag값\r\n     * @returns {null|*} 저장되어있는 Sprite 리턴합니다.\r\n     * @constructor\r\n     */\r\n    GetImage: function (tag) {\r\n        // tag에 따라 이미지를 반환하는 로직 구현\r\n        // 예를 들어, tag가 0부터 spr 배열의 길이까지의 인덱스 범위 안에 있다고 가정하고 반환할 수 있음\r\n        if (tag >= 0 && tag < this.spr.length) {\r\n            return this.spr[tag];\r\n        } else {\r\n            cc.warn(\"MSG :\", this.spr.length);\r\n            cc.warn(\"Invalid tag: \" + tag);\r\n            return null;\r\n        }\r\n    },\r\n});","﻿// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        sliderBar : cc.ProgressBar,\r\n        targetObject : cc.Node,\r\n        stopBtn: cc.Button,\r\n\r\n        isDegreeReverse : false,\r\n        isProgressReverse :false,\r\n\r\n        isStopped : false,\r\n        degree: 90,\r\n        progressValue : 0,\r\n    },\r\n\r\n\r\n    start () {\r\n\r\n        this.AddEvent();\r\n\r\n\r\n        this.DegreeGameStart();\r\n        this.ProgresGameStart();\r\n    },\r\n\r\n    onLoad () {\r\n\r\n    },\r\n\r\n    /**\r\n     * UI Event 추가\r\n     * @constructor\r\n     */\r\n    AddEvent: function(){\r\n\r\n        this.sliderBar.interactable = false;\r\n        this.stopBtn.node.on(\"click\",this.StopDegreeLooper,this);\r\n    },\r\n\r\n    StopDegreeLooper:function(){\r\n        this.isStoped = !this.isStoped;\r\n    },\r\n\r\n    ProgresGameStart: function(){\r\n        var self = this;\r\n\r\n        setInterval(()=>{\r\n            if(self.isStoped) return;\r\n\r\n            if(self.isProgressReverse){\r\n                self.DecreaseProgress();\r\n            }\r\n            else{\r\n                self.IncreaseProgress();\r\n            }\r\n            self.sliderBar.progress = self.progressValue;\r\n\r\n        },0.03);\r\n\r\n    },\r\n\r\n    IncreaseProgress: function(){\r\n        if(this.progressValue >= 1.0){\r\n            this.isProgressReverse = true;\r\n            return;\r\n        }\r\n        this.progressValue += 0.01;\r\n    },\r\n\r\n    DecreaseProgress: function(){\r\n        if(this.progressValue <= 0){\r\n            this.isProgressReverse = false;\r\n            return;\r\n        }\r\n        this.progressValue -= 0.01;\r\n    },\r\n\r\n    DegreeGameStart: function(){\r\n        var self = this;\r\n        var degreeInterval = setInterval(()=>{\r\n            if(self.isStoped) return;\r\n\r\n            if(self.isDegreeReverse){\r\n                self.DecreaseDegree();\r\n            }\r\n            else{\r\n                self.IncreaseDegree();\r\n            }\r\n            self.targetObject.angle = self.degree;\r\n\r\n        },0.03);\r\n    },\r\n\r\n    IncreaseDegree: function(){\r\n        if(this.degree >= 90){\r\n            this.isDegreeReverse = true;\r\n            return;\r\n        }\r\n        this.degree += 0.5;\r\n    },\r\n\r\n    DecreaseDegree: function(){\r\n        if(this.degree <= -90){\r\n            this.isDegreeReverse = false;\r\n            return;\r\n        }\r\n        this.degree -= 0.5;\r\n    },\r\n\r\n\r\n\r\n});\r\n","﻿\r\n\r\nconst Gobject = require(\"./Gobject\");\r\n\r\nvar ObjectLaiser = cc.Class({\r\n    extends: Gobject,\r\n\r\n    properties: {\r\n        number: 0,\r\n    },\r\n\r\n    Init: function(TAG, num){\r\n        this._super(TAG);\r\n        this.number = num;\r\n    },\r\n\r\n\r\n});\r\n","﻿\r\n\r\nconst Controller = require(\"Controller\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 최초 포지션, 포지션 정보가 저장됩니다.\r\n        // replay 해당 포지션으로 초기화 됩니다.\r\n        initPosition: null,\r\n\r\n        // 플레이어가 바라보고 있는 방향입니다.\r\n        direction : Env.DIRECTION_UP,\r\n\r\n        // 말풍선 객체입니다.\r\n        bubble: cc.Node,\r\n        // 말풍선 내부에 있는 텍스트 객체입니다.\r\n        bubbleLabel: cc.Label,\r\n\r\n        // 메시지가 보여지고있는 상태입니다.\r\n        isShowMessage : false,\r\n\r\n        // 죽었음을 표현\r\n        playerIsDead: false,\r\n        playerStatusInfo: 0,\r\n\r\n\r\n        audioFootStep:{\r\n            default : [],\r\n            type: cc.AudioClip,\r\n        },\r\n\r\n        audioStep: 0,\r\n        isPlaySound : false,\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어가 이동합니다.\r\n     * @param pos 이동될 포지션 값\r\n     * @constructor\r\n     */\r\n    Movement: function(pos){\r\n        this.changeSpriteDirection();\r\n        this.node.setPosition(pos);\r\n\r\n    },\r\n\r\n    PlayFootStep: function(){\r\n        if(this.isPlaySound) return;\r\n\r\n        this.isPlaySound = true;\r\n        var self = this;\r\n        setTimeout(()=>{\r\n            self.isPlaySound = false;\r\n        },300);\r\n\r\n\r\n        var audioClip = this.audioFootStep[this.audioStep]; // 오디오 클립 가져오기\r\n        cc.audioEngine.play(audioClip, false, 1, function () {\r\n            // 오디오가 종료될 때 호출되는 콜백 함수\r\n            // 다음에 재생할 오디오 클립 인덱스 업데이트\r\n            if (this.audioStep === 1)\r\n                this.audioStep = 0;\r\n            else\r\n                this.audioStep = 1;\r\n        }.bind(this));\r\n    },\r\n\r\n    /**\r\n     * 현재 방향에 따른 Scale 변경\r\n     * 로테이션 처리\r\n     */\r\n    changeSpriteDirection: function(){\r\n\r\n        var animationClip = this.getComponent(cc.Animation)\r\n        // RUN 상태\r\n\r\n        var isPlaying = false;\r\n\r\n\r\n        if(this.playerStatusInfo !== 9){\r\n            this.PlayerInitAnimation();\r\n        }\r\n\r\n        if(this.playerStatusInfo === 1){\r\n            switch (this.direction){\r\n\r\n                case Env.DIRECTION_UP:\r\n                    var upState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_UP);\r\n                    isPlaying = upState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_UP);\r\n                    }\r\n                    break;\r\n                case Env.DIRECTION_DOWN:\r\n                    var downState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_DOWN);\r\n                    isPlaying = downState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_DOWN);\r\n                    }\r\n\r\n                    break;\r\n                case Env.DIRECTION_RIGHT:\r\n                    var rightState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_RIGHT);\r\n                    isPlaying = rightState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_RIGHT);\r\n                    }\r\n                    break;\r\n                case Env.DIRECTION_LEFT:\r\n                    var leftState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_LEFT);\r\n                    isPlaying = leftState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_LEFT);\r\n                    }\r\n                    break;\r\n            }\r\n            // 효과음 추가.\r\n            this.PlayFootStep();\r\n        }\r\n        else{\r\n            if(this.playerStatusInfo !== 9){\r\n                // 방향이 왼쪽을 제외하곤 다 오른쪽 보도록\r\n                if(this.direction === Env.DIRECTION_LEFT){\r\n                    // idle_left 애니메이션 적용 예정\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_LEFT);\r\n                }\r\n                else if(this.direction === Env.DIRECTION_RIGHT){\r\n                    // idle_right 애니메이션 적용 예정\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_RIGHT);\r\n                }\r\n                else if(this.direction === Env.DIRECTION_UP){\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_UP);\r\n\r\n                }\r\n                else if(this.direction === Env.DIRECTION_DOWN){\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_DOWN);\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어 객체가 생성되면 최초로 해당 함수를 불러 초기화 해야합니다.\r\n     * @param v2  최초 포지션 인덱스를 가지고 옵니다.\r\n     * @param DIR  최초 플레이어가 바라보고 있는 방향\r\n     */\r\n    Init: function(v2 , DIR){\r\n        this.initPosition = v2;\r\n        this.node.setPosition(v2);\r\n        this._HideBubble();\r\n        this.PlayerInitAnimation();\r\n\r\n        this.node.zIndex = cc.macro.MAX_ZINDEX - 1;\r\n\r\n        var defaultDIR = 0;\r\n        switch (DIR){\r\n            case Env.DIRECTION_LEFT: defaultDIR = Env.PLAYER_DEFAULT_LEFT; break;\r\n            case Env.DIRECTION_RIGHT: defaultDIR = Env.PLAYER_DEFAULT_RIGHT; break;\r\n            case Env.DIRECTION_UP: defaultDIR = Env.PLAYER_DEFAULT_UP; break;\r\n            case Env.DIRECTION_DOWN: defaultDIR = Env.PLAYER_DEFAULT_DOWN; break;\r\n        }\r\n\r\n\r\n        if(defaultDIR === Env.PLAYER_DEFAULT_LEFT){\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_LEFT);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_UP){\r\n            // 위로 보고있을때\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_UP);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_DOWN){\r\n            // 아래보고있을때.\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_DOWN);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_RIGHT){\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_RIGHT);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 플레이어 정보를 초기화 하는 함수입니다.\r\n     */\r\n    playerInit : function(){\r\n        this.node.setPosition(this.initPosition);\r\n        this.direction = Env.DIRECTION_RIGHT;\r\n        this.changeSpriteDirection();\r\n    },\r\n\r\n    /**\r\n     * 플레이어 바라보고 있는 방향을 설정합니다.\r\n     * @param dir 플레이어가 바라보는 방향정보\r\n     */\r\n    setDirection : function(dir){\r\n        this.direction = dir;\r\n    },\r\n\r\n    /**\r\n     * 플레이어 상태값을 입력받아\r\n     * 말풍선, 죽음, 플레이어상태 표현 출력\r\n     * @param status\r\n     */\r\n    setPlayerStatus: function(status){\r\n\r\n        this.playerStatusInfo = status;\r\n        if(this.playerStatusInfo < 2 ) return;\r\n\r\n\r\n        switch (status) {\r\n            case 9:\r\n                // 플레이어 죽음.\r\n                this.PlayerDealAnimation();\r\n                break;\r\n            case 10:\r\n                // 해당방향으로 이동하지못함.\r\n                this.ShowMessage(\"이 방향으로 이동할수 없어!\");\r\n                break;\r\n            case 11:\r\n                // 폭탄에 맞음\r\n                var animationClip = this.getComponent(cc.Animation)\r\n\r\n                var upState = '';\r\n                var isPlaying= '';\r\n                // Hit Animation 처리.\r\n                if (this.direction === Env.ANIMATION_LEFT) {\r\n                    upState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_LEFT_HIT);\r\n                    isPlaying = upState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_LEFT_HIT);\r\n                    }\r\n                } else {\r\n                    upState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_RIGHT_HIT);\r\n                    isPlaying = upState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_RIGHT_HIT);\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case 13:\r\n                // Set 명령어 시도중 방향이 다를경우\r\n                this.ShowMessage(\"이곳에서 할수 없는 명령어야!\");\r\n                break;\r\n            case 14:\r\n                this.ShowMessage(\"문자열이 잘못 입력되었어.\");\r\n                break;\r\n\r\n            case 15:\r\n                this.ShowMessage(\"고체추진제 장착!\");\r\n                // 고체추진제\r\n                break;\r\n            case 16:\r\n                // 액체연료\r\n                this.ShowMessage(\"액체연료 장착!\");\r\n                break;\r\n            case 17:\r\n                // 추가엔진\r\n                this.ShowMessage(\"추가 엔진 장착!\");\r\n                break;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 메시지를 띄워줍니다.\r\n     * ex) 플레이어가 이동불가, 특별한 상태 메시지를 띄워줍니다.\r\n     * @param label 표기될 텍스트\r\n     */\r\n    ShowMessage: function(label){\r\n        if(this.isShowMessage) return;\r\n\r\n\r\n        this.bubbleLabel.string =  label;\r\n        this._ShowBubble();\r\n\r\n        var self = this;\r\n        setTimeout(function(){\r\n            self._HideBubble();\r\n        }, 1000); // 2000 밀리초 = 2초\r\n    },\r\n\r\n    /**\r\n     * 메시지를 감춥니다.\r\n     * @private\r\n     */\r\n    _HideBubble: function(){\r\n        this.isShowMessage = false;\r\n        this.bubble.active = false;\r\n    },\r\n\r\n    /**\r\n     * 메시지를 보여줍니다.\r\n     * @private\r\n     */\r\n    _ShowBubble: function(){\r\n        this.isShowMessage = true;\r\n        this.bubble.active = true;\r\n    },\r\n\r\n    PlayerInitAnimation: function(){\r\n        if(this.playerIsDead === false) return;\r\n        this.playerIsDead = false;\r\n        this.node.opacity = 255;\r\n\r\n    },\r\n\r\n    PlayerDealAnimation: function(){\r\n        if(this.playerIsDead) return;\r\n        this.playerIsDead = true;\r\n\r\n        var self = this;\r\n        var animationClip = this.getComponent(cc.Animation);\r\n\r\n        if (this.direction === Env.ANIMATION_LEFT) {\r\n            animationClip.play(Env.ANIMATION_LEFT_HIT);\r\n        } else {\r\n            animationClip.play(Env.ANIMATION_RIGHT_HIT);\r\n        }\r\n        var pInterval = setInterval(function(e){\r\n            if(self.node.opacity < 1){\r\n                clearInterval(pInterval);\r\n            }\r\n            self.node.opacity -= 10;\r\n        }, 20);\r\n    },\r\n\r\n\r\n\r\n});\r\n","﻿/**\r\n *\r\n * SoundManager 클래스는 SFX 최초로 모두 로드하고\r\n * 필요시 GetSound({Env.TAG}) 이용해 음악정보를 를 가져옵니다.\r\n * @type {Function}\r\n */\r\n\r\n\r\n\r\nvar SoundManager = cc.Class({\r\n    extends: cc.Component,\r\n\r\n\r\n    statics: {\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!SoundManager._instance) {\r\n                SoundManager._instance = new SoundManager();\r\n                SoundManager._instance.init();\r\n            }\r\n            return SoundManager._instance;\r\n        },\r\n    },\r\n\r\n\r\n    properties: {\r\n        sound: {\r\n            default: [],\r\n            type: cc.AudioClip,\r\n        },\r\n        isLoadedSFX: false,\r\n    },\r\n\r\n\r\n    init: function(){\r\n        this._LoadSFX();\r\n    },\r\n\r\n\r\n\r\n    IsLoadCheck: function(){\r\n        return this.sound[7];\r\n    },\r\n\r\n    PlaySfx: function(TAG){\r\n\r\n        if(TAG > this.sound.length ) {\r\n            console.log(\"SFX Load ERROR\");\r\n            return;\r\n        }\r\n\r\n        if(this.sound[TAG] === null) {\r\n            console.log(\"SFX NULL ERROR \");\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(\"playSFX ==> \" ,TAG);\r\n\r\n        var self = this;\r\n\r\n        var clip = this.sound[TAG];\r\n        cc.audioEngine.play(clip,false, 1, function(){\r\n            console.log(\"Done\");\r\n        }.bind(this));\r\n    },\r\n\r\n    _LoadSFX: function(){\r\n        if(this.isLoadedSFX) return;\r\n\r\n        this.sound = new Array(8).fill(null);\r\n\r\n        var self = this;\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_DROP_SWITCH, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[0] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_SWITCH, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[1] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_EXPLOSION, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[2] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_EARN, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[3] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_DROP_ITEM, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[4] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_ON, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[5] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_OFF, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[6] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_PARTS_DOCKING, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[7] = clip;\r\n            }\r\n        });\r\n\r\n\r\n    },\r\n\r\n});\r\n\r\n"],"file":"project.js"}