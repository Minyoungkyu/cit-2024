{"version":3,"sources":["assets/scripts/Controller.js","assets/scripts/Env.js","assets/scripts/GameLogic/GameManager.js","assets/scripts/Object/Gobject.js","assets/scripts/GameLogic/Loader.js","assets/scripts/minigame1/MainScene.js","assets/scripts/Object/ObjectLaiser.js","assets/scripts/Object/Player.js","assets/scripts/GameLogic/SoundManager.js"],"names":["Controller","cc","Class","statics","_instance","getInstance","properties","initJson","streamJson","loadIndex","gameStatus","isGamePause","getInitStageData","this","stage","getInitPlayerData","player","getInitOjbectDatas","init_item_list","getCommandLine","id","data","length","console","log","getCommandLength","ReceiveJson","json","arguments","undefined","GetProgressId","SetProgressId","GetStatus","SetStatus","status","SetOption","InitOption","PauseGame","ResumeGame","module","exports","window","SendInitData","SendStreamData","OnClickPlay","SetOptions","ExternalPauseGame","ExternalResumeGame","Env","OFFSET_X","OFFSET_Y","PLAYER_RADIO","SFX_FOOTSTEP_L","SFX_FOOTSTEP_R","SFX_DIRECTORY_PATH","SFX_FILENAME_DROP_SWITCH","SFX_FILENAME_LASER_SWITCH","SFX_FILENAME_EXPLOSION","SFX_FILENAME_EARN","SFX_FILENAME_DROP_ITEM","SFX_FILENAME_LASER_ON","SFX_FILENAME_LASER_OFF","SFX_FILENAME_PARTS_DOCKING","SFX_DROP_SWITCH","SFX_LASER_BUTTON","SFX_BOMB","SFX_EARN_ITEM","SFX_DROP_ITEM","SFX_LASER_ON","SFX_LASER_OFF","SFX_PARTS_DOCKING","FOOD","NORMAL_SWITCH_ON","NORMAL_SWITCH_OFF","LASER_SWITCH_ON","LASER_SWITCH_OFF","BATTERY","BOMB","ROCKET_EMPTY","ROCKET_FILLED","LASER_START_ON","LASER_MIDDLE_ON","LASER_END_ON","LASER_START_OFF","LASER_END_OFF","GOAL","VLASER_START_ON","VLASER_MIDDLE_ON","VLASER_END_ON","VLASER_START_OFF","FLOOR","MAX_LOAD_IMAGE_LENGTH","DIRECTORY_PATH","FOOD_BOX_FILE_NAME","N_SWITCH_ON_FILE_NAME","N_SWITCH_OFF_FILE_NAME","L_SWITCH_ON_FILE_NAME","L_SWITCH_OFF_FILE_NAME","BATTERY_FILE_NAME","BOMB_FILE_NAME","ROCKET_EMPTY_FILE_NAME","ROCKET_FILLED_FILE_NAME","L_START_ON_FILE_NAME","L_MIDDLE_FILE_NAME","L_END_ON_FILE_NAME","L_START_OFF_FILE_NAME","L_END_OFF_FILE_NAME","GOAL_FILE_NAME","VL_START_ON_FILE_NAME","VL_MIDDLE_ON_FILE_NAME","VL_END_ON_FILE_NAME","VL_START_OFF_FILE_NAME","FLOOR_FILE_NAME","DIRECTION_UP","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_DOWN","PLAYER_DEFAULT_UP","PLAYER_DEFAULT_DOWN","PLAYER_DEFAULT_LEFT","PLAYER_DEFAULT_RIGHT","ANIMATION_LEFT","ANIMATION_RIGHT","ANIMATION_UP","ANIMATION_DOWN","ANIMATION_IDLE_LEFT","ANIMATION_IDLE_RIGHT","ANIMATION_IDLE_UP","ANIMATION_IDLE_DOWN","ANIMATION_LEFT_HIT","ANIMATION_RIGHT_HIT","require","SoundManger","Loader","SoundManager","extends","Component","btnTest","Button","loadingBG","Node","isLoaded","isCameraShaked","isPlay","camera","Camera","mapOffset","default","idx","gameMap","TiledMap","spaceShip","bgNode","floorParent","item","dropItemList","dropSwitchList","goalObject","objectParent","effectParent","audioManager","pList","pIdx","hList","hIdx","expList","expIdx","dropEffectList","dropEffectIdx","isPlayExplosion","onLoad","active","self","inter","setInterval","GetImage","clearInterval","InitGame","start","audioInter","IsLoadCheck","_TileMapShake","s","setTimeout","CameraMoveX","currentPosition","node","position","newXPosition","x","v3","y","z","setPosition","LoadingFadeOut","loadingInterval","opacity","loadInit","EffectInit","InitMap","InitPlayer","InitObject","InitialCamera","ShakeEffect","intensity","v2","initialPos","clone","runAction","sequence","moveBy","neg","moveTo","update","dt","OnCodePlay","initPlayerObject","initPos","pos","playerDir","dir","hp","food_count","rocket_parts_count","initvector","GVector","loader","loadRes","Prefab","err","prefab","error","instantiate","getComponent","Init","addChild","lX","lY","stageObject","step","diff","level","gameLevel","ConvertGameLevel","url","GetMapURL","TiledMapAsset","tmx_file","tmxAsset","mapSize","getMapSize","tileSize","getTileSize","mapWidth","width","mapHeight","height","map","toString","cLevel","SetCamera","zoomLevel","zoomRatio","i","effect","n1","push","ShowExplosion","animation","Animation","on","play","ShowHeal","ShowPickup","PlaySfx","ShowDropEffect","goalList","goal_list","MakeGoal","objects","MakeUpObject","object","j","goal","targets","goalPos","AddPrefabs","type","startX","pos_start","startY","startPos","AddLaserPrefab","endX","pos_end","endY","endPos","p","switchId","switchTag","NameToTag","switchX","switchY","switchPos","dropX","pos_drop","dropY","dropType","drop_type","dropItemTag","dropItemPos","AddDropSwitchPrefabs","tag","posX","posY","itemId","AddRocketParts","str","prefabs","addComponent","v1","require_dir","rotation","setLocalZOrder","prefabName","itemurl","drop_item_tag","drop_item_pos","DropItemHide","isStatus","LaserInitial","executeCommand","command","ObjectUpdate","item_list","playerStatus","convertPos","EffectControl","setPlayerStatus","setDirection","Movement","id_list","ItemStatusUpdate","DropSwitchUpdate","index","dropSwitch","dropSwitchId","GetItemID","itemComp","dropItem","FindDropItem","DropItemShow","Hide","Show","itemObject","itemID","GetItemTag","itemTAG","isStatusChange","laser_direction","TAG","ChangeSprite","getChildByName","isOn","direction","ShowProofEffect","isInit","proofEffect","Sprite","spriteFrame","init","initStatus","spr","player_IMG","_LoadImage","Array","fill","SpriteFrame","warn","sliderBar","ProgressBar","targetObject","stopBtn","isDegreeReverse","isProgressReverse","isStopped","degree","progressValue","AddEvent","DegreeGameStart","ProgresGameStart","interactable","StopDegreeLooper","isStoped","DecreaseProgress","IncreaseProgress","progress","DecreaseDegree","IncreaseDegree","angle","Gobject","number","num","_super","initPosition","bubble","bubbleLabel","Label","isShowMessage","playerIsDead","playerStatusInfo","audioFootStep","AudioClip","audioStep","isPlaySound","isBombAnimation","changeSpriteDirection","PlayFootStep","audioClip","audioEngine","bind","animationClip","PlayerInitAnimation","getAnimationState","isPlaying","DIR","_HideBubble","zIndex","macro","MAX_ZINDEX","defaultDIR","playerInit","PlayerDealAnimation","ShowMessage","label","string","_ShowBubble","pInterval","e","sound","isLoadedSFX","_LoadSFX","clip"],"mappings":"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","sourcesContent":["﻿/**\r\n *\r\n * 웹 페이지와 인터렉션을 받는 클래스 입니다. 싱글턴 클래스입니다.\r\n * 해당클래스는 Json 정보를 저장하고,\r\n * Manager 클래스에서 게임을 총괄합니다.\r\n * Manager 다른클래스에서  해당 클래스를 불러 값을 가져옵ㄴ다.\r\n *\r\n * @type {Function}\r\n */\r\nvar Controller = cc.Class({\r\n    statics: {\r\n        // Singleton\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!Controller._instance) {\r\n                Controller._instance = new Controller();\r\n                // Controller._instance.init();\r\n            }\r\n            return Controller._instance;\r\n        },\r\n    },\r\n\r\n    /**\r\n     *  initJson 최초 초기화 된 정보 json\r\n     *  streamJson 명령문 모든 json 정보\r\n     *  loadIndex 현재 선택된 id 값 index 뜻\r\n     *  gameStatus\r\n     *      - true 업데이트 돌아감\r\n     *      - false 종료 상태\r\n     */\r\n    properties: {\r\n        initJson : null,\r\n        streamJson : null,\r\n        loadIndex : 0,\r\n        gameStatus: false,\r\n        isGamePause: false,\r\n    },\r\n\r\n\r\n    /**\r\n     * 최초 맵 초기화 정보를 받는 함수\r\n     * @returns {*} stageJson 값\r\n     */\r\n    getInitStageData: function(){\r\n        return this.initJson.stage;\r\n    },\r\n\r\n    /**\r\n     * 최초 플레이어 초기화 정보를 받는 함수\r\n     * @returns {*} playerJson값\r\n     */\r\n    getInitPlayerData: function(){\r\n        return this.initJson.player;\r\n    },\r\n\r\n\r\n    /**\r\n     * 최초 아이템 포지션 및 설정할때 넘기는 함수.\r\n     * @returns {*}\r\n     */\r\n    getInitOjbectDatas: function(){\r\n        return this.initJson.stage.init_item_list;\r\n    },\r\n\r\n    /**\r\n     * 로드된 json정보를 id파라미터를 통해 로드\r\n     * 메인으로 사용되는 함수\r\n     * 최대 명령어 줄이 瑛뺐嚥?-1 값을 리턴 사용처에선 -1이면 명령어 끝을 의미\r\n     * @param id id 값\r\n     * @returns {number|*} id에 해당하는 json 정보모두\r\n     */\r\n    getCommandLine: function(id){\r\n\r\n\r\n        var data = this.streamJson;\r\n\r\n        if(data == null) return -1;\r\n\r\n        if( id >= data.data.length ){\r\n            console.log(\"Out of Range\");\r\n            return -1;\r\n        }\r\n\r\n\r\n        return data.data[id];\r\n    },\r\n\r\n    /**\r\n     * 로드된 명령어줄의 길이를 받는 함수\r\n     * @returns {number} Json 현재 길이 리턴\r\n     */\r\n    getCommandLength : function(){\r\n        var data = this.streamJson;\r\n\r\n        return data.data.length -1;\r\n    },\r\n\r\n\r\n    /**\r\n     * 외부에서 불려지고, Json 데이터가 저장되는 함수\r\n     * 다른 곳에선 액세스되선 안됩니다.\r\n     *\r\n     * @param json json 데이터\r\n     * @param isInit  초기화상태\r\n     * @constructor\r\n     */\r\n    ReceiveJson : function(json, isInit = false){\r\n        if(isInit){\r\n            this.initJson = json;\r\n\r\n        }\r\n        else{\r\n            this.streamJson = json;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 현재 프로그래스 바 id 값 가져옵니다.\r\n     * @returns {number|*} id 정보\r\n     */\r\n    GetProgressId: function(){\r\n        return this.loadIndex;\r\n    },\r\n\r\n\r\n    /**\r\n     * 웹에서 접근하고, ID값 passing 해주는 함수\r\n     * @param id id값을 받습니다.\r\n     * @constructor\r\n     */\r\n    SetProgressId: function(id){\r\n        this.loadIndex = id;\r\n    },\r\n\r\n    /**\r\n     * 현재 상태값 가져오는 함수\r\n     * 해당 함수로 코드가 종료되었는지, 실행중인지 체크됩니다.\r\n     * 0 ,실행중 아님 상태\r\n     * 1, 실행중 상태\r\n     * @returns {boolean|*} 게임 상태값을 가져옵니다.\r\n     * @constructor\r\n     */\r\n    GetStatus : function(){\r\n        return this.gameStatus;\r\n    },\r\n\r\n\r\n    /**\r\n     * 웹에서 접근하고 상태값 변경되면 변경 해주는 함수.\r\n     * @constructor\r\n     */\r\n    SetStatus: function(status){\r\n        // 이미 돌고 있으면 막음. 예비.\r\n        this.gameStatus = status;\r\n    },\r\n\r\n\r\n    /**\r\n     *\r\n     * 옵션정보 넘겨주는 함수\r\n     * @param json Json 옵션 정보\r\n     * @constructor\r\n     */\r\n    SetOption: function(json){\r\n\r\n    },\r\n\r\n    /**\r\n     * 최초 옵션 정보 받는 Json\r\n     * @param json Json 옵션 정보\r\n     * @constructor\r\n     */\r\n    InitOption: function(json){\r\n\r\n    },\r\n\r\n    /**\r\n     * 게임 멈추는 함수 (외부에서 불리는 함수)\r\n     * @constructor\r\n     */\r\n    PauseGame: function(){\r\n        this.isGamePause = true;\r\n    },\r\n\r\n    /**\r\n     * 게임 이어서 하도록 하는 함수 (외부에서 불리는 함수)\r\n     * @constructor\r\n     */\r\n    ResumeGame : function(){\r\n        this.isGamePause = false;\r\n    },\r\n\r\n\r\n\r\n});\r\n\r\nmodule.exports = Controller;\r\n\r\n/**\r\n * 페이지가 최초 로드될때 Call 되는 Init Json 데이터\r\n */\r\nwindow.SendInitData = function(json){\r\n    if(Controller.getInstance().initJson != null) return true;\r\n\r\n    Controller.getInstance().ReceiveJson(json , true);\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * 외부에서 Call 하는 Stream Function\r\n */\r\nwindow.SendStreamData = function(json){\r\n    Controller.getInstance().ReceiveJson(json);\r\n    Controller.getInstance().SetProgressId(0);\r\n    Controller.getInstance().SetStatus(true);\r\n\r\n};\r\n\r\n/**\r\n * 현재 프로그래스바 id 값 웹에서 넘어오는 함수\r\n */\r\nwindow.SetProgressId = function(id){\r\n    Controller.getInstance().SetProgressId(id);\r\n};\r\n\r\n\r\n/**\r\n * 웹상 play버튼 클릭시 실행하는 함수\r\n * status값을 true로 바꿔 update문 돌도록 함.\r\n * @constructor\r\n */\r\nwindow.OnClickPlay = function(){\r\n    Controller.getInstance().SetStatus(true);\r\n};\r\n\r\n/**\r\n * 게임도중 옵션정보가 넘어올때 Json 값.\r\n * @param json 옵션 json\r\n * @constructor\r\n */\r\nwindow.SetOptions = function(json){\r\n    Controller.getInstance().SetOption(json);\r\n}\r\n\r\n/**\r\n * 최초 실행시 옵션정보 넘겨주는 Json\r\n * @param json 옵션 Json\r\n * @constructor\r\n */\r\nwindow.InitOption= function(json){\r\n    Controller.getInstance().InitOption(json);\r\n}\r\n\r\n/**\r\n * 외부에서 접근하여 Pasue 상태인경우 게임을 멈추는 함수\r\n * @constructor\r\n */\r\nwindow.ExternalPauseGame = function(){\r\n    Controller.getInstance().PauseGame();\r\n}\r\n\r\n/**\r\n * 외부에서 접근하여 Resume 상태 처리해주는 함수\r\n * @constructor\r\n */\r\nwindow.ExternalResumeGame = function(){\r\n    Controller.getInstance().ResumeGame();\r\n}\r\n\r\n\r\n\r\n","﻿\r\nwindow.Env = {\r\n    /**\r\n     * 맵 기본 사이즈 스케일링\r\n     */\r\n    OFFSET_X : (32*3),\r\n    OFFSET_Y : (32*3),\r\n    //96\r\n\r\n    //0,-1\r\n\r\n    /**\r\n     * 플레이어 포지션 오프셋.\r\n     */\r\n    PLAYER_RADIO : 32 * 1.5,\r\n    //48\r\n\r\n\r\n\r\n    /**\r\n     * SFX 태그 정보 해당 태그를 이용해 불르도록.\r\n     */\r\n    // 플레이어 에서 진행함\r\n    SFX_FOOTSTEP_L : 0,\r\n    SFX_FOOTSTEP_R : 1,\r\n\r\n\r\n\r\n    /**\r\n     * 음악\r\n     */\r\n    SFX_DIRECTORY_PATH : \"./sfx/\",\r\n\r\n    SFX_FILENAME_DROP_SWITCH : 'drop_switch',\r\n    SFX_FILENAME_LASER_SWITCH : 'laser_switch',\r\n    SFX_FILENAME_EXPLOSION : 'explosion',\r\n    SFX_FILENAME_EARN: 'itemEarn',\r\n    SFX_FILENAME_DROP_ITEM : 'drop_item',\r\n    SFX_FILENAME_LASER_ON : 'laser_on',\r\n    SFX_FILENAME_LASER_OFF : 'laser_off',\r\n    SFX_FILENAME_PARTS_DOCKING: 'parts_done',\r\n\r\n\r\n    // Audio Manager 에서 불려짐.\r\n    SFX_DROP_SWITCH: 0,\r\n    SFX_LASER_BUTTON: 1,\r\n    SFX_BOMB : 2,\r\n    SFX_EARN_ITEM : 3,\r\n    SFX_DROP_ITEM: 4,\r\n    SFX_LASER_ON : 5,\r\n    SFX_LASER_OFF : 6,\r\n    SFX_PARTS_DOCKING : 7,\r\n\r\n\r\n\r\n\r\n\r\n    // Loader Singleton 에서 사용되는 전역 넘버\r\n    /**\r\n     * Loader Singletone 객체에 대한 태그\r\n     */\r\n    FOOD: 0,\r\n    NORMAL_SWITCH_ON: 1,\r\n    NORMAL_SWITCH_OFF: 2,\r\n    LASER_SWITCH_ON : 3,\r\n    LASER_SWITCH_OFF:4,\r\n    BATTERY : 5,\r\n    BOMB:6,\r\n    ROCKET_EMPTY : 7,\r\n    ROCKET_FILLED: 8,\r\n    LASER_START_ON:9,\r\n    LASER_MIDDLE_ON:10,\r\n    LASER_END_ON:11,\r\n    LASER_START_OFF:12,\r\n    LASER_END_OFF:13,\r\n    GOAL: 14,\r\n\r\n    VLASER_START_ON : 15,\r\n    VLASER_MIDDLE_ON : 16,\r\n    VLASER_END_ON : 17,\r\n    VLASER_START_OFF: 18,\r\n    FLOOR : 19,\r\n    // 최대 사이즈표현\r\n    MAX_LOAD_IMAGE_LENGTH : 20,\r\n\r\n\r\n    /**\r\n     * Loader class 에서 사용되는 파일명 및 경로\r\n     */\r\n    DIRECTORY_PATH : \"./$jin/\",\r\n\r\n    FOOD_BOX_FILE_NAME : 'foodBox',\r\n    N_SWITCH_ON_FILE_NAME : 'nSwitch_on',\r\n    N_SWITCH_OFF_FILE_NAME : 'nSwitch_off',\r\n    L_SWITCH_ON_FILE_NAME : 'lSwitch_on',\r\n    L_SWITCH_OFF_FILE_NAME : 'lSwitch_off',\r\n    BATTERY_FILE_NAME : \"battery\",\r\n    BOMB_FILE_NAME : 'bomb',\r\n    ROCKET_EMPTY_FILE_NAME: 'rocket_empty',\r\n    ROCKET_FILLED_FILE_NAME : 'rocket_fill',\r\n    L_START_ON_FILE_NAME : 'lStart_on',\r\n    L_MIDDLE_FILE_NAME : 'lMiddle_on',\r\n    L_END_ON_FILE_NAME : 'lEnd_on',\r\n    L_START_OFF_FILE_NAME : 'lStart_off',\r\n    L_END_OFF_FILE_NAME : 'lEnd_off',\r\n    GOAL_FILE_NAME : 'test-none',\r\n\r\n    VL_START_ON_FILE_NAME : 'vlStart_on',\r\n    VL_MIDDLE_ON_FILE_NAME : 'vlMiddle_on',\r\n    VL_END_ON_FILE_NAME : 'vlEnd_on',\r\n    VL_START_OFF_FILE_NAME:'vlStart_off',\r\n    FLOOR_FILE_NAME : 'floor',\r\n\r\n\r\n\r\n\r\n    /**\r\n     * 케릭터 방향 정보 (바라보고있는곳)\r\n    */\r\n    DIRECTION_UP: 'up',\r\n    DIRECTION_LEFT: 'left',\r\n    DIRECTION_RIGHT: 'right',\r\n    DIRECTION_DOWN: 'down',\r\n\r\n    /**\r\n     * 플레이어 방향\r\n     */\r\n    PLAYER_DEFAULT_UP: 0,\r\n    PLAYER_DEFAULT_DOWN: 1,\r\n    PLAYER_DEFAULT_LEFT:2,\r\n    PLAYER_DEFAULT_RIGHT:3,\r\n\r\n\r\n    /**\r\n     * 플레이어 애니메이션 정보를 저장하고있음.\r\n     */\r\n    ANIMATION_LEFT: \"leftRun\",\r\n    ANIMATION_RIGHT: \"rightRun\",\r\n    ANIMATION_UP: \"upRun\",\r\n    ANIMATION_DOWN: \"downRun\",\r\n    ANIMATION_IDLE_LEFT: \"left_idle\",\r\n    ANIMATION_IDLE_RIGHT: \"right_idle\",\r\n    ANIMATION_IDLE_UP: \"idle_back\",\r\n    ANIMATION_IDLE_DOWN: \"idle_front\",\r\n\r\n    ANIMATION_LEFT_HIT : \"hit_left\",\r\n    ANIMATION_RIGHT_HIT : \"hit_right\",\r\n\r\n};\r\n","﻿\r\n\r\n\r\nconst Controller = require(\"../Controller\");\r\nconst SoundManger = require(\"./SoundManager\");\r\nconst Loader = require(\"./Loader\");\r\nconst SoundManager = require(\"./SoundManager\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        btnTest: cc.Button,\r\n        // 로딩 화면\r\n        loadingBG: cc.Node,\r\n\r\n        isLoaded : false,\r\n        isCameraShaked : false,\r\n\r\n        // 코드가 현재 플레이중인 상태를 저장하는 변수\r\n        isPlay: false,\r\n\r\n        // 메인 카메라\r\n        camera : cc.Camera,\r\n\r\n        // 게임 시작전 강제로 포지션 오프셋값 주는 배열 변수\r\n        mapOffset : {\r\n            default:[],\r\n        },\r\n\r\n        // 현재 읽고 있는 id 값 뜻함.\r\n        idx: 0,\r\n\r\n        /**\r\n         * 실제 사용하는 객체 모음\r\n         */\r\n        // 맵 객체\r\n        gameMap: cc.TiledMap,\r\n        // 플레이어 객체\r\n        player : cc.Node,\r\n        // 우주선 파츠 부모 객체\r\n        //파츠는 해당 객체 아래에 추가됨.\r\n        spaceShip : cc.Node,\r\n        // 배경화면 뿌려지는곳.\r\n        bgNode: cc.Node,\r\n\r\n        // Floor 객체 Parent\r\n        floorParent : cc.Node,\r\n\r\n\r\n        //플레이어, 맵을 제외한 월드에 위치 하는 객체를 담는 배열\r\n        item: [],\r\n\r\n        // 드롭 아이템 리스트\r\n        dropItemList: [],\r\n        // 드롭스위치 리스트\r\n        dropSwitchList:[],\r\n\r\n        // 게임 최종도착지\r\n        goalObject: cc.Node,\r\n\r\n        // 객체노드.\r\n        objectParent: cc.Node,\r\n\r\n        effectParent: cc.Node,\r\n\r\n        audioManager: cc.Node,\r\n\r\n\r\n\r\n        // 픽업 이펙트 담는 리스트\r\n        pList : [],\r\n        pIdx : 0,\r\n\r\n        // 회복 이펙트 담는 리스트\r\n        hList : [],\r\n        hIdx : 0,\r\n\r\n        // 이펙트 담는 리스트\r\n        expList: [],\r\n        expIdx : 0,\r\n\r\n        // 아이템 떨어질때 이펙트 리스트\r\n        dropEffectList: [],\r\n        dropEffectIdx : 0,\r\n\r\n\r\n        // 폭발 이펙트 중인지 체크\r\n        isPlayExplosion : false,\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * 게임에서 사용될 이미지로드 SingleTon 로드가 된걸 확인한 뒤\r\n     * 로딩 화면을 감춰주는 Interval 생성\r\n     */\r\n    onLoad(){\r\n        this.loadingBG.active = true;\r\n\r\n        /**\r\n         * + 이미지 및 맵까지 로드가 되면 로딩을 푸느게 좋지않을까 (추후 조정.)\r\n         */\r\n        var self = this;\r\n        var inter = setInterval(function(){\r\n            if(Loader.getInstance().GetImage(0) != null){\r\n                clearInterval(inter);\r\n\r\n                self.InitGame();\r\n                //self.LoadingFadeOut();\r\n            }\r\n        },90);\r\n\r\n    },\r\n\r\n    start(){\r\n        /**\r\n         * 오디오 로드 테스함.\r\n         * @type {number}\r\n         */\r\n        var audioInter = setInterval(()=>{\r\n\r\n            if(SoundManger.getInstance().IsLoadCheck() != null){\r\n                clearInterval(audioInter);\r\n            }\r\n        },30);\r\n\r\n    },\r\n\r\n    /**\r\n     * 큰 타일맵 로드시 맵이 짤려보여는 현상을 해결하기 위해 맵을 2초에 걸쳐 맵을 좌우로 이동시켜주는 효과\r\n     * 해당 효과로 맵 랜더링 오류가 해결\r\n     */\r\n    _TileMapShake: function(){\r\n        var s = this;\r\n        setTimeout(function(){\r\n            s.CameraMoveX(1);\r\n        },1000);\r\n\r\n        setTimeout(function(){\r\n\r\n           s.CameraMoveX(-1);\r\n        },2000);\r\n    },\r\n\r\n    /**\r\n     * mapShake\r\n     * @param idx\r\n     * @constructor\r\n     */\r\n    CameraMoveX : function(idx){\r\n        const currentPosition = this.camera.node.position;\r\n        const newXPosition = currentPosition.x - idx;\r\n\r\n        var v3 = cc.v3(newXPosition, currentPosition.y, currentPosition.z);\r\n\r\n        this.camera.node.setPosition(v3);\r\n    },\r\n\r\n\r\n    /**\r\n     * 로딩 검은 화면 FadeOut 해주는 함수.\r\n     * Init관련된건 이미 처리하고 Fade out 처리해줌.\r\n     * @constructor\r\n     */\r\n    LoadingFadeOut: function(){\r\n        var self = this;\r\n        var offset = 3;\r\n        setTimeout(()=>{\r\n            var loadingInterval = setInterval(function(){\r\n\r\n                if(self.loadingBG.opacity <= 0){\r\n                    self.loadingBG.active = false;\r\n                    self.isLoaded = true;\r\n                    clearInterval(loadingInterval);\r\n                }\r\n                self.loadingBG.opacity -= offset;\r\n            },30);\r\n        },1000);\r\n    },\r\n\r\n\r\n    /**\r\n     * 게임 초기화 해주는 함수입니다.\r\n     * @constructor\r\n     */\r\n    InitGame: function(){\r\n        var self = this;\r\n\r\n        this.mapOffset = [\r\n            // T-1\r\n            { x: 0, y: 2 },\r\n            // T-2\r\n            { x: 0, y: 1 },\r\n            // 1-1-E\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-1-N\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-1-H\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n\r\n            // 1-2-E\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-2-N\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n            // 1-2-H\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n            { x: 0, y: 1 },\r\n\r\n\r\n            // 1-3-E\r\n            { x: 1, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n\r\n            // 1-3-N\r\n            { x: -1, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n\r\n            //1-3-H\r\n            { x: -1, y: -2 },\r\n            { x: 0, y: -1 },\r\n            { x: -4, y: 1 },\r\n        ];\r\n        this.loadInit();\r\n    },\r\n\r\n    /**\r\n     *  Json 데이터가 로드가 정상적으로 되었는지 Interval을 이용하여 확인한다.\r\n     */\r\n    loadInit: function(){\r\n\r\n        var self = this;\r\n        // Interver 이용하여 로드 체크한다.\r\n        var inter = setInterval(function(){\r\n\r\n            if(Controller.getInstance().initJson != null){\r\n                self.EffectInit();\r\n                self.InitMap();\r\n                // self.InitFloor();\r\n                self.InitPlayer();\r\n                self.InitObject();\r\n\r\n                // 카메라 초기화\r\n                self.InitialCamera();\r\n\r\n                self.LoadingFadeOut();\r\n                clearInterval(inter);\r\n            }\r\n\r\n        }, 100);\r\n    },\r\n\r\n\r\n    //TODO EFFECT\r\n    ShakeEffect: function() {\r\n        if(this.isCameraShaked) return;\r\n        this.isCameraShaked = true;\r\n\r\n        var intensity = cc.v2(5, 0);\r\n\r\n        // 초기 위치 저장\r\n        const initialPos = this.camera.node.position.clone();\r\n        // 일정 시간 동안 흔들림 애니메이션\r\n        this.camera.node.runAction(\r\n            cc.sequence(\r\n                cc.moveBy(0.02, intensity),\r\n                cc.moveBy(0.04, intensity.neg()),\r\n                cc.moveBy(0.02, intensity.neg()),\r\n                cc.moveBy(0.04, intensity.neg()),\r\n                cc.moveTo(0, initialPos),\r\n            )\r\n        );\r\n    },\r\n\r\n    /**\r\n     *  게임 Update 코드 상태값을 확인하여 코드를 동작시키는 함수\r\n     *  0 값이면 동작하지않고,\r\n     *  1 이면 동작하도록 Controller Status 값으로 확인.\r\n     * @param dt\r\n     */\r\n    update(dt){\r\n        if(!this.isLoaded) return;\r\n\r\n        var status = Controller.getInstance().GetStatus();\r\n        if(status){\r\n            this.OnCodePlay();\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어 초기화 해주는 함수 입니다.\r\n     * @constructor\r\n     */\r\n    InitPlayer: function(){\r\n        var initPlayerObject = Controller.getInstance().getInitPlayerData();\r\n\r\n        var initPos = initPlayerObject.pos;\r\n        var playerDir = initPlayerObject.dir;\r\n        var initHp = initPlayerObject.hp;\r\n        var playerStatus = initPlayerObject.status;\r\n        var foodCount = initPlayerObject.food_count;\r\n        var rocket_parts_count = initPlayerObject.rocket_parts_count;\r\n\r\n        var self = this;\r\n\r\n        var initvector = this.GVector(initPos[0],initPos[1]);\r\n        //var initvector = this.GVector(0,0);\r\n\r\n        // 2.3.x 버전\r\n        cc.loader.loadRes('./prefabs/Player', cc.Prefab, function (err, prefab) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            // 로드된 SpriteFrame 사용\r\n            self.player = cc.instantiate(prefab);\r\n            self.player.getComponent(\"Player\").Init(initvector, playerDir);\r\n\r\n            // 현재 스크립트가 추가되어 있는 노드에 플레이어 노드를 추가합니다.\r\n            self.node.addChild(self.player);\r\n        });\r\n    },\r\n\r\n    /**\r\n     *\r\n     * Json coordination -> Cocos game Coordination\r\n     *\r\n     * 실제 게임 벡터로 변환 해주는 함수\r\n      * @param x 입력되는 X좌표 값입니다.\r\n     *  @param y 입력되는 Y좌표 값입니다.\r\n     * @constructor\r\n     */\r\n    GVector : function (x, y) {\r\n\r\n        var lX = x * 1;\r\n        var lY = y * -1;\r\n\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n        var gameLevel = this.ConvertGameLevel(step,diff,level);\r\n\r\n\r\n        var v2 = cc.v2(\r\n            ((lX + this.mapOffset[gameLevel].x) * Env.OFFSET_X) + Env.PLAYER_RADIO,\r\n            ((lY - this.mapOffset[gameLevel].y) * Env.OFFSET_Y) - Env.PLAYER_RADIO\r\n        );\r\n        return v2;\r\n    },\r\n\r\n    /**\r\n     * Json 정보를 토대로 맵 오프셋값을 가져옵니다.\r\n     * @param step json 단계\r\n     * @param diff json 난이도  Easy , Normal , Hard\r\n     * @param level Json 레벨\r\n     * @returns {number}  컨버팅된 게임 레벨값\r\n     * @constructor\r\n     */\r\n    ConvertGameLevel: function(step,diff,level){\r\n\r\n        var gameLevel = 0;\r\n\r\n        if(step === \"tutorial\"){\r\n            gameLevel =  level - 1;\r\n        }\r\n        else{\r\n            // 1-1-E\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 1){ gameLevel = 2; }\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 2){ gameLevel = 3; }\r\n            if(step === \"1-1\" && diff === \"Easy\" && level === 3){ gameLevel = 4; }\r\n\r\n            // 1-1-N\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 1){ gameLevel = 5; }\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 2){ gameLevel = 6; }\r\n            if(step === \"1-1\" && diff === \"Normal\" && level === 3){ gameLevel = 7; }\r\n\r\n            // 1-1-H\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 1){ gameLevel = 8; }\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 2){ gameLevel = 9; }\r\n            if(step === \"1-1\" && diff === \"Hard\" && level === 3){ gameLevel = 10; }\r\n\r\n            // 1-2-E\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 1){ gameLevel = 11; }\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 2){ gameLevel = 12; }\r\n            if(step === \"1-2\" && diff === \"Easy\" && level === 3){ gameLevel = 13; }\r\n\r\n            // 1-2-N\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 1){ gameLevel = 14; }\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 2){ gameLevel = 15; }\r\n            if(step === \"1-2\" && diff === \"Normal\" && level === 3){ gameLevel = 16; }\r\n\r\n            // 1-2-H\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 1){ gameLevel = 17; }\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 2){ gameLevel = 18; }\r\n            if(step === \"1-2\" && diff === \"Hard\" && level === 3){ gameLevel = 19; }\r\n\r\n            // 1-3-E\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 1){ gameLevel = 20; }\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 2){ gameLevel = 21; }\r\n            if(step === \"1-3\" && diff === \"Easy\" && level === 3){ gameLevel = 22; }\r\n\r\n            // 1-3-N\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 1){ gameLevel = 23; }\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 2){ gameLevel = 24; }\r\n            if(step === \"1-3\" && diff === \"Normal\" && level === 3){ gameLevel = 25; }\r\n\r\n            // 1-3-H\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 1){ gameLevel = 26; }\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 2){ gameLevel = 27; }\r\n            if(step === \"1-3\" && diff === \"Hard\" && level === 3){ gameLevel = 28; }\r\n        }\r\n        return gameLevel;\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵정보를 로드하고, 초기화 합니다.\r\n     * @constructor\r\n     */\r\n    InitMap: function(){\r\n        var mapurl = this.GetMapURL();\r\n        var self = this;\r\n\r\n        var url = \"./map/\" + mapurl;\r\n\r\n        // // 2.3.x 버전\r\n        cc.loader.loadRes(url, cc.TiledMapAsset, function (err, tmx_file) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n            self.gameMap.tmxAsset = tmx_file;\r\n\r\n            /**\r\n             * 아래 에서 맵사이즈를 계산하여 해당 포지션 만큼 카메라 포지션 셋팅해줍니다.\r\n             */\r\n            var mapSize = self.gameMap.getMapSize();\r\n            var tileSize = self.gameMap.getTileSize();\r\n\r\n            var mapWidth = mapSize.width * tileSize.width;\r\n            var mapHeight = mapSize.height * tileSize.height;\r\n\r\n            var v2 = cc.v2(-mapWidth*1.5, -mapHeight*3);\r\n\r\n            self.gameMap.node.setPosition(0,-mapHeight * 3);\r\n            self._TileMapShake();\r\n        });\r\n    },\r\n\r\n\r\n    /**\r\n     * Json Stage 정보를 토대로 저장된 맵 프리팹 url 리턴합니다.\r\n     * @returns {string}\r\n     * @constructor\r\n     */\r\n    GetMapURL : function(){\r\n        var url = \"\";\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var map  = stageObject.map;\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n\r\n        if(step === \"tutorial\"){\r\n\r\n            url = \"map_T-\"+level.toString();\r\n        }\r\n        else{\r\n            var cLevel = \"Easy\";\r\n            switch (diff){\r\n                case \"Easy\": cLevel = \"E\"; break;\r\n                case \"Normal\" : cLevel = \"N\"; break;\r\n                case \"Hard\" : cLevel = \"H\"; break;\r\n            }\r\n            url = \"map_\"+step.toString() + \"-\" + cLevel + \"-\" + level.toString();\r\n        }\r\n        return url;\r\n    },\r\n\r\n\r\n    /**\r\n     * 카메라 포지션을 조정합니다.\r\n     * @constructor\r\n     * @param x X좌표\r\n     * @param y Y좌표\r\n     */\r\n    SetCamera : function(x = 0, y = 0, zoomLevel = 1.5){\r\n        // 메인 카메라의 포지션 설정\r\n        this.camera.node.setPosition(cc.v3(x, y, 0)); // 여기서 x, y, z는 포지션의 좌표값입니다.\r\n        this.camera.zoomRatio = zoomLevel;\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵의 갯수가 많지 않으니 하드 코딩처리되어있습니다.\r\n     * 카메라 포지셔닝, 맵의 오프셋값 이 정의 되어있습니다.\r\n     * @constructor\r\n     */\r\n    InitialCamera: function() {\r\n\r\n        // Default option\r\n        // -600 -860  1\r\n        var stageObject = Controller.getInstance().getInitStageData();\r\n\r\n        var step = stageObject.step;\r\n        var diff = stageObject.diff;\r\n        var level = stageObject.level;\r\n\r\n        var gameLevel = this.ConvertGameLevel(step,diff,level);\r\n\r\n        this.spaceShip.active = false;\r\n\r\n        switch (gameLevel){\r\n            case 0 : case 1:\r\n                this.SetCamera(-650,-900,1.75);\r\n                break;\r\n            case 2: case 3:\r\n            case 5: case 6:\r\n            case 8: case 9:\r\n                this.SetCamera(-600,-970,1.2);\r\n                break;\r\n            case 4: case 7: case 10:\r\n                this.SetCamera(-400,-1060,1);\r\n                break;\r\n\r\n            case 11: case 14: case 17:\r\n                this.SetCamera(-300,-1200,0.75);\r\n                break;\r\n            case 12: case 15: case 18:\r\n                this.SetCamera(250,-1350,0.65);\r\n                break;\r\n            case 13: case 16: case 19:\r\n                this.SetCamera(550,-1350,0.6);\r\n                break;\r\n\r\n            case 20: case 23: case 26:\r\n                this.SetCamera(140,-900,0.8);\r\n                this.spaceShip.setPosition(cc.v2(-2600,-500));\r\n                this.spaceShip.active = true;\r\n                break;\r\n            case 21: case 24: case 27:\r\n                this.SetCamera(350,-900,0.7);\r\n                this.spaceShip.setPosition(cc.v2(-200,-500));\r\n                this.spaceShip.active = true;\r\n                break;\r\n\r\n            case 22: case 25: case 28:\r\n                this.SetCamera(350,-1300,0.7);\r\n                this.spaceShip.setPosition(cc.v2(4000,-500));\r\n                this.spaceShip.active = true;\r\n                break;\r\n        }\r\n        //this.camera.node.setPosition()\r\n    },\r\n\r\n\r\n    /**\r\n     * 이펙트 초기화 해주는 함수\r\n     * 게임의 진행에 따라 Call 될수 있습니다.\r\n     * @constructor\r\n     */\r\n    EffectInit: function(){\r\n        var self = this;\r\n        var url = '/prefabs/explosion';\r\n        var healUrl = \"/prefabs/heal\";\r\n        var pickUrl = \"/prefabs/pickup\";\r\n        var dropEffectUrl = \"/prefabs/dropEffect\";\r\n\r\n\r\n        for(var i = 0; i < 5; i++) {\r\n            cc.loader.loadRes(url, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n                self.effectParent.addChild(n1);\r\n\r\n                self.expList.push(n1);\r\n\r\n            });\r\n\r\n            cc.loader.loadRes(healUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n\r\n                self.hList.push(n1);\r\n\r\n            });\r\n\r\n            cc.loader.loadRes(pickUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n                self.pList.push(n1);\r\n\r\n            });\r\n\r\n\r\n            cc.loader.loadRes(dropEffectUrl, cc.Prefab, function (err, effect) {\r\n                // 리소스 로드가 완료된 후 실행할 코드\r\n                if (err) {\r\n                    cc.error(\"Error loading image: \" + err);\r\n                    return;\r\n                }\r\n\r\n                var n1 = cc.instantiate(effect);\r\n                n1.active = false;\r\n\r\n                self.effectParent.addChild(n1);\r\n                self.dropEffectList.push(n1);\r\n            });\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 폭발 이펙트 보여주는 함수입니다.\r\n     * @param pos  포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowExplosion: function(pos){\r\n\r\n        if(this.expIdx >= this.expList.length-1  ) this.expIdx = 0;\r\n        this.expList[this.expIdx].active = true;\r\n\r\n        this.expList[this.expIdx].setPosition(pos);\r\n\r\n        var animation = this.expList[this.expIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n\r\n            if(self.expList[self.expIdx].active){\r\n                self.expList[self.expIdx].active = false;\r\n                self.expIdx++;\r\n            }\r\n        },this);\r\n        self.isCameraShaked = false;\r\n\r\n\r\n        animation.play(\"explosion\");\r\n    },\r\n\r\n    /**\r\n     * 아이템이 회복 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowHeal: function(pos){\r\n\r\n        if(this.hIdx >= this.hList.length-1  ) this.hIdx = 0;\r\n\r\n        this.hList[this.hIdx].active = true;\r\n        this.hList[this.hIdx].setPosition(pos);\r\n\r\n        var animation = this.hList[this.hIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n            if(self.hList[self.expIdx].active) {\r\n                self.hList[self.hIdx].active = false;\r\n                self.hIdx++;\r\n            }\r\n        },this);\r\n\r\n        animation.play(\"heal\");\r\n        this.hList[this.hIdx].getComponent(cc.Animation).play(\"heal\");\r\n    },\r\n\r\n    /**\r\n     * 아이템이 획득 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowPickup: function(pos){\r\n\r\n        if(this.pIdx >= this.pList.length-1  ) this.pIdx = 0;\r\n\r\n        this.pList[this.pIdx].active = true;\r\n        this.pList[this.pIdx].setPosition(pos);\r\n\r\n        var animation = this.pList[this.pIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n            if(self.pList[self.pIdx].active){\r\n                self.pList[self.pIdx].active = false;\r\n                self.pIdx++;\r\n            }\r\n\r\n        },this);\r\n        SoundManager.getInstance().PlaySfx(Env.SFX_EARN_ITEM);\r\n        animation.play(\"pickup\");\r\n    },\r\n\r\n\r\n    /**\r\n     * 아이템이 드롭될때 이펙트 효과  추가\r\n     * @param pos 포지션값 GVector() 사용 변환 포지션\r\n     * @constructor\r\n     */\r\n    ShowDropEffect: function(pos){\r\n\r\n        if(this.dropEffectIdx >= this.dropEffectList.length-1 ) this.dropEffectIdx = 0;\r\n\r\n        this.dropEffectList[this.dropEffectIdx].active = true;\r\n\r\n        this.dropEffectList[this.dropEffectIdx].setPosition(pos);\r\n\r\n        var animation = this.dropEffectList[this.dropEffectIdx].getComponent(cc.Animation);\r\n\r\n        var self = this;\r\n        animation.on('finished',function(){\r\n\r\n            if(self.dropEffectList[self.dropEffectIdx].active){\r\n                self.dropEffectList[self.dropEffectIdx].active = false;\r\n                self.dropEffectIdx++;\r\n            }\r\n\r\n        },this);\r\n\r\n        animation.play(\"dropeffect\");\r\n    },\r\n\r\n\r\n    /**\r\n     * 맵위에 출력될 객체 초기화합니다.\r\n     * @constructor \r\n     */\r\n    InitObject: function() {\r\n\r\n        var goalList = Controller.getInstance().getInitStageData().goal_list;\r\n        this.MakeGoal(goalList);\r\n\r\n        var objects = Controller.getInstance().getInitOjbectDatas();\r\n\r\n        if (objects.length < 1) {\r\n            console.log(\"item list is Null\");\r\n            return;\r\n        } else {\r\n            for (var i = 0; i < objects.length; i++) {\r\n                this.MakeUpObject(objects[i]);\r\n            }\r\n        }\r\n//        console.log(this.item[0].getComponent(\"Gobject\").GetItemID());\r\n\r\n    },\r\n\r\n    /**\r\n     * 골 지점 객체를 생성합니다.\r\n     * @param object 골객체 관련.\r\n     * @constructor\r\n     */\r\n    MakeGoal: function(object){\r\n        for(var j = 0; j < object.length; j++){\r\n            if(object[j].goal === \"target\"){\r\n                var targets = object[j];\r\n                var goalPos = cc.v2(targets.pos[0], targets.pos[1]);\r\n                this.AddPrefabs(Env.GOAL, -1, goalPos);\r\n                break;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 게임의 전반적인 모든 객체를 만드는 함수\r\n     * 해당 함수는 총괄 함수는 컨트롤하는 함수입니다.\r\n     *\r\n      * @param type 객체의 타입을 받습니다.\r\n     * @constructor\r\n     */\r\n    MakeUpObject: function(object){\r\n        var type = object.type;\r\n\r\n        if(type === \"laser\"){\r\n\r\n            var id = object.id;\r\n            var dir = object.dir;\r\n            var startX = object.pos_start[0];\r\n            var startY = object.pos_start[1];\r\n            var status = object.status;\r\n\r\n            var startPos = cc.v2(startX, startY);\r\n            this.AddLaserPrefab(Env.LASER_START_ON, id, startPos , status , dir );\r\n\r\n\r\n\r\n            var endX = object.pos_end[0];\r\n            var endY = object.pos_end[1];\r\n\r\n            var endPos = cc.v2(endX, endY);\r\n            this.AddLaserPrefab(Env.LASER_END_ON, id, endPos, status, dir );\r\n\r\n            /**\r\n             * 중간 레이저 포인터 가져오기.\r\n             */\r\n            if(dir === 'h'){\r\n                // 가로\r\n                for(var i = startX+1 ; i < endX ; i++){\r\n                    var p = cc.v2(i, startY);\r\n                    this.AddLaserPrefab(Env.LASER_MIDDLE_ON, id, p , status, dir);\r\n                }\r\n            }\r\n            else if(dir === \"v\"){\r\n                // 세로\r\n                for(var i = startY+1 ; i < endY ; i++){\r\n                    var p = cc.v2(startX, i);\r\n                    this.AddLaserPrefab(Env.LASER_MIDDLE_ON, id, p , status, dir);\r\n                }\r\n            }\r\n        }\r\n        else if(type === 'drop_switch'){\r\n            // drop Switch\r\n            var switchId = object.id;\r\n            var switchTag = this.NameToTag(object.type);\r\n            var switchX = object.pos[0];\r\n            var switchY = object.pos[1];\r\n\r\n            var switchPos = cc.v2(switchX, switchY);\r\n\r\n            var dropX = object.pos_drop[0];\r\n            var dropY = object.pos_drop[1];\r\n            var dropType = object.drop_type;\r\n            var dropItemTag = this.NameToTag(dropType);\r\n\r\n            var dropItemPos = cc.v2(dropX, dropY);\r\n            this.AddDropSwitchPrefabs(switchTag, switchId, switchPos, dropItemTag,  dropItemPos )\r\n\r\n        }\r\n        else{\r\n\r\n            var tag = this.NameToTag(object.type);\r\n\r\n            var posX = object.pos[0];\r\n            var posY = object.pos[1];\r\n            var itemId = object.id;\r\n            var pos = cc.v2(posX, posY);\r\n\r\n\r\n            if(tag === Env.ROCKET_EMPTY){\r\n                this.AddRocketParts(tag,itemId,pos, object);\r\n            }\r\n            else{\r\n                this.AddPrefabs(tag, itemId,  pos );\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 입력된 String 값을 게임에서 사용되는 태그로바꿔주는 함수\r\n     * @param str 입력된 Json type값\r\n     * @constructor\r\n     */\r\n    NameToTag: function(str){\r\n\r\n        switch(str){\r\n            case \"food\" : return Env.FOOD;\r\n            case \"bomb\": return Env.BOMB;\r\n            case \"rocket_parts\" : return Env.BATTERY;\r\n            case \"drop_switch\" : return Env.NORMAL_SWITCH_ON;\r\n            case \"laser_switch\": return Env.LASER_SWITCH_ON;\r\n            case \"engines\": case \"solid_propellant\": case \"liquid_fuel\":  return Env.ROCKET_EMPTY;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 로켓파츠 프리팹 만들어주는 함수\r\n     * @param tag  로켓파츠의 태그\r\n     * @param id  객체 아이디\r\n     * @param pos  GVector 의 포지션\r\n     * @param object  json Stream  (방향정보를 가져오기위함)\r\n     * @constructor\r\n     */\r\n    AddRocketParts: function(tag, id, pos, object){\r\n        var prefabName = \"rocketParts\";\r\n        var self = this;\r\n\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag,id);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n\r\n            // n1.opacity = 100;\r\n\r\n            switch (object.require_dir){\r\n                case \"up\": n1.rotation = 0; break;\r\n                case \"down\": n1.rotation = -180; break;\r\n                case \"left\": n1.rotation = -90; break;\r\n                case \"right\": n1.rotation = 90; break;\r\n            }\r\n\r\n            self.item.push(n1);\r\n            // self.node.addChild(n1);\r\n            self.objectParent.addChild(n1);\r\n            self.objectParent.setLocalZOrder = 10;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 프리팹을 생성해줍니다.\r\n     * @param tag  객체의 태그값 Env 전역넘버\r\n     * @param id  Json 에서 불러온 id 값\r\n     * @param pos  cc.v2 포지션값\r\n     * @constructor\r\n     */\r\n    AddPrefabs: function(tag , id , pos ){\r\n        var prefabName = \"\";\r\n        var self = this;\r\n\r\n        // 태그값에 해당하는 프리팹 이름 가져옴.\r\n        switch (tag){\r\n            case Env.FOOD : prefabName = \"food\";    break;\r\n            case Env.NORMAL_SWITCH_ON : case Env.NORMAL_SWITCH_OFF : prefabName = \"nSwitch\";  break;\r\n            case Env.LASER_SWITCH_ON : case Env.LASER_SWITCH_OFF : prefabName = \"lSwitch\"; break;\r\n            case Env.BATTERY : prefabName = \"battery\"; break;\r\n            case Env.BOMB : prefabName = \"bomb\"; break;\r\n            case Env.ROCKET_EMPTY : case Env.ROCKET_FILLED : prefabName = \"rocketParts\";  break;\r\n            case Env.GOAL : prefabName = \"goal\"; break;\r\n            case Env.FLOOR: prefabName = \"floor\"; break;\r\n        }\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n                return;\r\n            }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag,id);\r\n\r\n            if(tag === Env.GOAL){\r\n                self.goalObject = n1;\r\n                self.node.addChild(n1);\r\n            }\r\n            else{\r\n                self.item.push(n1);\r\n                self.node.addChild(n1);\r\n\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 드롭 스위치 프리팹 만들어주는 함수\r\n     * @param tag  태그값 (드롭 스위치 태그) Env 참고\r\n     * @param id  객체의 아이디값\r\n     * @param pos  GVector 를 활용한 함수\r\n     * @param drop_item_tag  드롭 아이템의 태그\r\n     * @param drop_item_pos  드롭 아이템 포지션\r\n     * @constructor\r\n     */\r\n    AddDropSwitchPrefabs : function(tag, id, pos , drop_item_tag, drop_item_pos){\r\n        var self = this;\r\n        var dropSwitchPrefabs = \"nSwitch\";\r\n        var dropItemPrefabs = \"battery\";\r\n\r\n        var switchUrl = \"./prefabs/\" + dropSwitchPrefabs;\r\n\r\n        cc.loader.loadRes(switchUrl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag, id);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n\r\n            self.dropSwitchList.push(n1);\r\n        });\r\n\r\n        var dropUrl = './prefabs/' + dropItemPrefabs;\r\n        cc.loader.loadRes(dropUrl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n\r\n            var n1 = cc.instantiate(prefabs);\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(drop_item_tag, id);\r\n            n1.getComponent(\"Gobject\").DropItemHide(true);\r\n\r\n\r\n            var v1 = self.GVector(drop_item_pos.x,drop_item_pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n\r\n            self.dropItemList.push(n1);\r\n\r\n        });\r\n    },\r\n\r\n\r\n    /**\r\n     * 레이저 객체 프리팹을 만들어주는 함수\r\n     * @param tag  레이저 태그\r\n     * @param id  id\r\n     * @param pos  방향\r\n     * @constructor\r\n     */\r\n    AddLaserPrefab: function(tag, id, pos , status, dir){\r\n        var prefabName = \"laser\";\r\n        var self = this;\r\n\r\n\r\n        // 레이저 중간 객체라면 아래처럼 이미지 교체.\r\n        if(tag === Env.LASER_MIDDLE_ON)  prefabName = \"laserMiddle\";\r\n\r\n        var itemurl = \"./prefabs/\" + prefabName;\r\n\r\n        cc.loader.loadRes(itemurl, cc.Prefab, function (err, prefabs) {\r\n            // 리소스 로드가 완료된 후 실행할 코드\r\n            if (err) { cc.error(\"Error loading image: \" + err); return; }\r\n            var n1 = cc.instantiate(prefabs);\r\n\r\n            n1.addComponent(\"Gobject\");\r\n            n1.getComponent('Gobject').Init(tag, id);\r\n\r\n            var isStatus = false;\r\n\r\n\r\n            if(status === 0)  isStatus = false;\r\n            else  isStatus = true;\r\n\r\n            n1.getComponent(\"Gobject\").LaserInitial(tag,isStatus , dir);\r\n\r\n            var v1 = self.GVector(pos.x,pos.y);\r\n            n1.setPosition(v1);\r\n            self.node.addChild(n1);\r\n            self.item.push(n1);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * PYthon 코드 대로 동작을 실행합니다.\r\n     * 실제 플레이어 및  모든 객체 상태를 변화를 줍니다.\r\n     * 단 return 값을 false 하면 이동종료를 뜻합니다.\r\n     * @returns {boolean}\r\n     */\r\n    executeCommand: function(id = 0){\r\n        var command = Controller.getInstance().getCommandLine(id);\r\n\r\n\r\n        /**\r\n         * 명령어 종료를 뜻함\r\n         */\r\n        if(command === -1) return false;\r\n        if(command.status === 1) return false;\r\n\r\n        // 객체 상태값 업데이트\r\n        this.ObjectUpdate(command.item_list);\r\n\r\n        // 플레이어 상태값\r\n        var playerStatus = command.player.status;\r\n\r\n\r\n        var convertPos = this.GVector(command.player.pos[0], command.player.pos[1]);\r\n        this.EffectControl(playerStatus, convertPos);\r\n\r\n        this.player.getComponent(\"Player\").setPlayerStatus(playerStatus);\r\n        this.player.getComponent(\"Player\").setDirection(command.player.dir);\r\n        this.player.getComponent(\"Player\").Movement(convertPos);\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * 폭탄, 픽업 아이템 보여주는 함수\r\n     * @param status 현재 상태값\r\n     * @param pos 포지션 GVector로 적용해야함\r\n     * @constructor\r\n     */\r\n    EffectControl: function(status , pos){\r\n        var self = this;\r\n\r\n        if(status === 11){\r\n            this.ShakeEffect();\r\n            this.ShowExplosion(pos);\r\n\r\n        }\r\n        else if( status === 3){\r\n            this.ShowPickup(pos);\r\n        }\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * 스트림 데이터를 입력받아 맵위에 있는 객체의 상태를 변화 하거나\r\n     * Sprite를 변경해주는 업데이트 함수.\r\n     * @param id_list\r\n     * @constructor\r\n     */\r\n    ObjectUpdate: function(id_list) {\r\n        // 비어 있다면 실행하지 않습니다.\r\n        if(id_list.length < 1) return;\r\n\r\n        for(var i = 0; i < id_list.length; i++){\r\n            // 아이템 스테이터스 업데이트\r\n            this.ItemStatusUpdate(i, id_list[i]);\r\n            // Drop Switch UPdate\r\n            this.DropSwitchUpdate(i, id_list[i]);\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 드롭 스위치 의 상태를 표현해주는 함수입니다.\r\n     * @param index  현재 상태 리스트\r\n     * @param status 상태값을 찾습니다.\r\n     * @constructor\r\n     */\r\n    DropSwitchUpdate: function(index, status){\r\n        // 드랍 스위치가 아닌경우\r\n        for(var i = 0; i < this.dropSwitchList.length; i++){\r\n            var dropSwitch = this.dropSwitchList[i].getComponent(\"Gobject\");\r\n\r\n            var dropSwitchId = dropSwitch.GetItemID();\r\n\r\n\r\n            if(dropSwitchId === index && status === 0){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n\r\n                if(dropItem.active === false){\r\n                    this.ShowDropEffect(dropItem.position);\r\n                }\r\n                itemComp.DropItemShow();\r\n                // this.audioManager.getComponent('SoundManager').Play(Env.SFX)\r\n                dropSwitch.Hide();\r\n\r\n            }\r\n            else if(dropSwitchId === index && status === 1){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Hide();\r\n\r\n                itemComp.DropItemHide();\r\n\r\n                dropSwitch.Hide();\r\n\r\n            }\r\n            else if(dropSwitchId === index && status === 2){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Show();\r\n                itemComp.DropItemShow();\r\n\r\n                dropSwitch.Show();\r\n            }\r\n            else if(dropSwitchId === index && status === 3){\r\n                var dropItem =  this.FindDropItem(dropSwitchId);\r\n                var itemComp = dropItem.getComponent(\"Gobject\");\r\n                // itemComp.Hide();\r\n\r\n                itemComp.DropItemHide();\r\n\r\n                dropSwitch.Show();\r\n\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 드랍아이템 찾는 함수\r\n     * @param id  드롭아이템이랑 매칭되는 스위치 아이디\r\n     * @return {*}  찾은 객체 리턴\r\n     * @constructor\r\n     */\r\n    FindDropItem: function(id){\r\n      for( var i = 0; i <  this.dropItemList.length; i++){\r\n          if(this.dropItemList[i].getComponent(\"Gobject\").GetItemID() === id) return this.dropItemList[i];\r\n      }\r\n    },\r\n\r\n\r\n    /**\r\n     * 아이템 상태를 관리해주는 함수\r\n     *\r\n     * @param index 아이템 인덱스값을 받음\r\n     * @param status 상태는 스트림데이터로 넘어오는 아이템들 리스트 임.\r\n     * @constructor\r\n     */\r\n    ItemStatusUpdate: function(index, status){\r\n\r\n\r\n        for(var i = 0; i < this.item.length; i++){\r\n            var itemObject = this.item[i].getComponent(\"Gobject\");\r\n\r\n            var itemID = itemObject.GetItemID();\r\n            var itemTag = itemObject.GetItemTag();\r\n            if(itemID === index && status === 0){\r\n                itemObject.Hide();\r\n            }\r\n            else if(itemObject.GetItemID() === index && status === 1){\r\n                itemObject.Show();\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * Json에서 읽어온 코드 뭉치를 게임에 적용하여 플레이 합니다.\r\n     * 실제 사용되는 함수입니다.\r\n     * @constructor\r\n     */\r\n    OnCodePlay: function(){\r\n        if(this.isPlay) return;\r\n        var self = this;\r\n        this.isPlay = true;\r\n\r\n\r\n        this.idx = Controller.getInstance().GetProgressId();\r\n\r\n\r\n        var inter = setInterval(function(){\r\n\r\n            if(Controller.getInstance().isGamePause) return;\r\n\r\n\r\n            if(self.executeCommand(self.idx) === false){\r\n                clearInterval(inter);\r\n                self.isPlay = false;\r\n                Controller.getInstance().SetStatus(false);\r\n            }\r\n            self.idx++;\r\n        }, 1000/60);\r\n    },\r\n});\r\n","﻿\r\nconst Controller = require(\"../Controller\");\r\n\r\nvar Loader = require(\"../GameLogic/Loader\");\r\nvar SoundManager = require(\"../GameLogic/SoundManager\");\r\n\r\n\r\nvar Gobject = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties : {\r\n        itemId : 0,\r\n        itemTAG : 0,\r\n        isStatusChange : false,\r\n        laser_direction : 'h',\r\n    },\r\n\r\n    /**\r\n     * 태그값은 Env에 Loader Singleton 변수 선언되어있습니다.\r\n     * 정수값을 받아 최초 이미지 변경\r\n     * 태그값을 받아 객체의 이미지를 변경합니다.\r\n     * @param TAG\r\n     * @constructor\r\n     */\r\n    Init: function(TAG, id){\r\n        this.ChangeSprite(TAG);\r\n        this.itemId = id;\r\n        this.itemTAG = TAG;\r\n\r\n        this.isStatusChange = true;\r\n\r\n        if(TAG === Env.FOOD ){\r\n            this.node.getChildByName(\"gliter\").getComponent(cc.Animation).play(\"gliter\");\r\n        }\r\n        else if(TAG === Env.GOAL){\r\n            console.log(\"GOAL HI\");\r\n            this.node.getComponent(cc.Animation).play(\"goal\");\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     *  객체의 최초 설정된 태그값을 리턴.\r\n     * @constructor\r\n     */\r\n    GetItemTag: function(){\r\n        return this.itemTAG;\r\n    },\r\n\r\n    /**\r\n     * 아이템 아이디값을 리턴\r\n     * @returns {number|*}  아이템 ID\r\n     * @constructor\r\n     */\r\n    GetItemID: function(){\r\n        return this.itemId;\r\n    },\r\n\r\n\r\n\r\n    /**\r\n     * 레이저 객체에서 최초 초기화 하는방식.\r\n     * @param TAG Raser Tag\r\n     * @param isOn 켜져있는지 꺼져있는지 체크.\r\n     * @constructor\r\n     */\r\n    LaserInitial : function(TAG, isOn = false , direction){\r\n        this.laser_direction = direction;\r\n\r\n        if(direction === 'h'){\r\n            if(isOn){\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.LASER_START_ON);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.LASER_MIDDLE_ON);\r\n\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.ChangeSprite(Env.LASER_END_ON);\r\n                }\r\n            }\r\n            else{\r\n                this.isStatusChange = true;\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.LASER_START_OFF);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = false;\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.ChangeSprite(Env.LASER_END_OFF);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if(isOn){\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.VLASER_START_ON);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.VLASER_MIDDLE_ON);\r\n\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.node.active = true;\r\n                    this.ChangeSprite(Env.VLASER_END_ON);\r\n                }\r\n            }\r\n            else{\r\n                this.isStatusChange = true;\r\n                if(TAG === Env.LASER_START_ON){\r\n                    this.ChangeSprite(Env.VLASER_START_OFF);\r\n                }\r\n                else if(TAG === Env.LASER_MIDDLE_ON){\r\n                    this.node.active = false;\r\n                }\r\n                else if(TAG === Env.LASER_END_ON){\r\n                    this.node.active = false;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n    },\r\n\r\n    /**\r\n     * 객체를 숨깁니다.\r\n     * 객체를 보여주려면 .Show()를 사용하세요\r\n     * @constructor\r\n     */\r\n    Hide: function(){\r\n        if(this.isStatusChange === false) return;\r\n\r\n        this.isStatusChange = false;\r\n        if(this.itemTAG === Env.LASER_START_ON ){\r\n\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_START_OFF);\r\n            }\r\n            else{\r\n                this.ChangeSprite(Env.VLASER_START_OFF);\r\n            }\r\n            //레이저 시작점\r\n        }\r\n        else if(this.itemTAG === Env.LASER_END_ON){\r\n            // 레이저 끝점\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_END_OFF);\r\n            }\r\n            else{\r\n                this.node.active = false;\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_SWITCH_ON){\r\n            // 레이저 스위치\r\n\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_LASER_BUTTON);\r\n\r\n            this.ChangeSprite(Env.LASER_SWITCH_OFF);\r\n        }\r\n        else if(this.itemTAG === Env.ROCKET_EMPTY){\r\n            // 로켓 파츠 처리\r\n            this.ChangeSprite(Env.ROCKET_EMPTY);\r\n        }\r\n        else if(this.itemTAG === Env.NORMAL_SWITCH_ON){\r\n            this.ChangeSprite(Env.NORMAL_SWITCH_OFF);\r\n        }\r\n        else{\r\n            if(this.node.active === false)  return;\r\n\r\n            if(this.itemTAG === Env.BOMB){\r\n                SoundManager.getInstance().PlaySfx(Env.SFX_BOMB);\r\n            }\r\n            this.node.active = false;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 객체를 보여줍니다.\r\n     * 객체를 감추려면 .Hide()를 사용하세요\r\n     * @constructor\r\n     */\r\n    Show: function(){\r\n        if(this.isStatusChange) return;\r\n        this.isStatusChange = true;\r\n\r\n\r\n        if(this.itemTAG === Env.LASER_START_ON ){\r\n            // 레이저 시작점.\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_START_ON);\r\n            }\r\n            else{\r\n                this.ChangeSprite(Env.VLASER_START_ON);\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_END_ON){\r\n            // 레이저 끝점\r\n            if(this.laser_direction === 'h'){\r\n                this.ChangeSprite(Env.LASER_END_ON);\r\n            }\r\n            else{\r\n                this.node.active = true;\r\n                this.ChangeSprite(Env.VLASER_MIDDLE_ON);\r\n            }\r\n\r\n        }\r\n        else if(this.itemTAG === Env.LASER_SWITCH_ON){\r\n            // 레이저 스위치\r\n            this.ChangeSprite(Env.LASER_SWITCH_ON);\r\n        }\r\n        else if(this.itemTAG === Env.ROCKET_EMPTY){\r\n            // 로켓 파츠 처리\r\n            // this.node.opacity = 255;\r\n            this.ChangeSprite(Env.ROCKET_FILLED);\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_PARTS_DOCKING);\r\n\r\n            this.ShowProofEffect();\r\n        }\r\n        else if(this.itemTAG === Env.NORMAL_SWITCH_ON){\r\n\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_DROP_SWITCH);\r\n            this.ChangeSprite(Env.NORMAL_SWITCH_ON);\r\n        }\r\n        else{\r\n            if(this.node.active === true) return;\r\n            this.node.active = true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 드롭 아이템 을 보여주는 함수입니다.\r\n     * @constructor\r\n     */\r\n    DropItemShow: function(){\r\n        if(this.node.active === true) return;\r\n        SoundManager.getInstance().PlaySfx(Env.SFX_DROP_ITEM);\r\n\r\n        this.node.active = true;\r\n    },\r\n\r\n    /**\r\n     * 드롭아이템을 감추는 함수입니다.\r\n     * @constructor\r\n     */\r\n    DropItemHide: function(isInit = false){\r\n        if(this.node.active === false) return;\r\n\r\n        if(!isInit){\r\n            SoundManager.getInstance().PlaySfx(Env.SFX_EARN_ITEM);\r\n        }\r\n\r\n        this.node.active = false;\r\n    },\r\n\r\n\r\n    /**\r\n     * 로켓 파츠 장착시 이펙트를 보여줍니다.\r\n     * @constructor\r\n     */\r\n    ShowProofEffect: function(){\r\n        var proofEffect = this.node.getChildByName(\"proof\");\r\n        proofEffect.active = true\r\n\r\n        var animation = proofEffect.getComponent(cc.Animation);\r\n\r\n        animation.on('finished', function () {\r\n            proofEffect.active = false;\r\n        }, this);\r\n        animation.play(\"proof\");\r\n    },\r\n\r\n    /**\r\n     * tag 값을 받아 sprite를 변경합니다.\r\n     * @param tag Env Tag값을 받습니다..\r\n     * @constructor\r\n     */\r\n    ChangeSprite: function(tag){\r\n        this.node.getComponent(cc.Sprite).spriteFrame = Loader.getInstance().GetImage(tag);\r\n    },\r\n\r\n});\r\n","﻿/**\r\n * Loader 클래스는 싱글턴 패턴 입니다.\r\n * Loader 클래스는 Sprite 최초로 모두 로드하고\r\n * 필요시 GetImage({Env.TAG}) 이용해 이미지를 가져옵니다.\r\n * @type {Function}\r\n */\r\nvar Loader = cc.Class({\r\n    extends: cc.Component,\r\n\r\n    statics: {\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!Loader._instance) {\r\n                Loader._instance = new Loader();\r\n                Loader._instance.init();\r\n            }\r\n            return Loader._instance;\r\n        },\r\n    },\r\n\r\n    properties: {\r\n        /**\r\n        * 초기화 상태값을 가지고 있습니다.\r\n        * false , 초기화 되지않음.\r\n        * true , 초기화 됨.\r\n        */\r\n        initStatus: false,\r\n        // Sprite 정보를 담고있는 배열입니다.\r\n        spr: [],\r\n        player_IMG : [],\r\n\r\n    },\r\n\r\n    init: function () {\r\n        console.log(\"Loaded Sprite\");\r\n        this._LoadImage();\r\n    },\r\n\r\n    /**\r\n     * 최초 객체가 생성될때 지정된 이미지를 읽어와 저장합니다.\r\n     * 단, 최초 1회만 진행합니다.\r\n     * 일반적으로 Loader 객체가 생성될때 1회 만 동작하도록 하고있습니다.\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    _LoadImage: function () {\r\n        if (this.initStatus) return false;\r\n        this.initStatus = true;\r\n\r\n        this.spr = new Array(Env.MAX_LOAD_IMAGE_LENGTH).fill(null);\r\n        this.player_IMG = new Array(4).fill(null);\r\n\r\n        var self = this;\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.FOOD_BOX_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n\r\n                console.log(Env.DIRECTORY_PATH+Env.FOOD_BOX_FILE_NAME);\r\n\r\n                self.spr[0] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.N_SWITCH_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[1] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.N_SWITCH_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[2]= spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_SWITCH_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[3] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_SWITCH_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[4] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.BATTERY_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[5] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.BOMB_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[6] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.ROCKET_EMPTY_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[7] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.ROCKET_FILLED_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[8] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_START_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[9] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_MIDDLE_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[10] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_END_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[11] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_START_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[12] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.L_END_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[13] = spr;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.GOAL_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[14] = spr;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_START_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[15] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_MIDDLE_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[16] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_END_ON_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[17] = spr;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.DIRECTORY_PATH + Env.VL_START_OFF_FILE_NAME, cc.SpriteFrame, function (err, spr) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.spr[18] = spr;\r\n            }\r\n        });\r\n        return true;\r\n    },\r\n\r\n\r\n    /**\r\n     * 메인으로 사용되는 함수입니다.\r\n     * 해당 함수는 매개변수로 ag값 받아\r\n     * Sprite를 리턴해주는 함수입니다.\r\n     * @param tag Env 에 저장되어 있는 Tag값\r\n     * @returns {null|*} 저장되어있는 Sprite 리턴합니다.\r\n     * @constructor\r\n     */\r\n    GetImage: function (tag) {\r\n        // tag에 따라 이미지를 반환하는 로직 구현\r\n        // 예를 들어, tag가 0부터 spr 배열의 길이까지의 인덱스 범위 안에 있다고 가정하고 반환할 수 있음\r\n        if (tag >= 0 && tag < this.spr.length) {\r\n            return this.spr[tag];\r\n        } else {\r\n            cc.warn(\"MSG :\", this.spr.length);\r\n            cc.warn(\"Invalid tag: \" + tag);\r\n            return null;\r\n        }\r\n    },\r\n});","﻿// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n\r\n        sliderBar : cc.ProgressBar,\r\n        targetObject : cc.Node,\r\n        stopBtn: cc.Button,\r\n\r\n        isDegreeReverse : false,\r\n        isProgressReverse :false,\r\n\r\n        isStopped : false,\r\n        degree: 90,\r\n        progressValue : 0,\r\n    },\r\n\r\n\r\n    start () {\r\n\r\n        this.AddEvent();\r\n\r\n\r\n        this.DegreeGameStart();\r\n        this.ProgresGameStart();\r\n    },\r\n\r\n    onLoad () {\r\n\r\n    },\r\n\r\n    /**\r\n     * UI Event 추가\r\n     * @constructor\r\n     */\r\n    AddEvent: function(){\r\n\r\n        this.sliderBar.interactable = false;\r\n        this.stopBtn.node.on(\"click\",this.StopDegreeLooper,this);\r\n    },\r\n\r\n    StopDegreeLooper:function(){\r\n        this.isStoped = !this.isStoped;\r\n    },\r\n\r\n    ProgresGameStart: function(){\r\n        var self = this;\r\n\r\n        setInterval(()=>{\r\n            if(self.isStoped) return;\r\n\r\n            if(self.isProgressReverse){\r\n                self.DecreaseProgress();\r\n            }\r\n            else{\r\n                self.IncreaseProgress();\r\n            }\r\n            self.sliderBar.progress = self.progressValue;\r\n\r\n        },0.03);\r\n\r\n    },\r\n\r\n    IncreaseProgress: function(){\r\n        if(this.progressValue >= 1.0){\r\n            this.isProgressReverse = true;\r\n            return;\r\n        }\r\n        this.progressValue += 0.01;\r\n    },\r\n\r\n    DecreaseProgress: function(){\r\n        if(this.progressValue <= 0){\r\n            this.isProgressReverse = false;\r\n            return;\r\n        }\r\n        this.progressValue -= 0.01;\r\n    },\r\n\r\n    DegreeGameStart: function(){\r\n        var self = this;\r\n        var degreeInterval = setInterval(()=>{\r\n            if(self.isStoped) return;\r\n\r\n            if(self.isDegreeReverse){\r\n                self.DecreaseDegree();\r\n            }\r\n            else{\r\n                self.IncreaseDegree();\r\n            }\r\n            self.targetObject.angle = self.degree;\r\n\r\n        },0.03);\r\n    },\r\n\r\n    IncreaseDegree: function(){\r\n        if(this.degree >= 90){\r\n            this.isDegreeReverse = true;\r\n            return;\r\n        }\r\n        this.degree += 0.5;\r\n    },\r\n\r\n    DecreaseDegree: function(){\r\n        if(this.degree <= -90){\r\n            this.isDegreeReverse = false;\r\n            return;\r\n        }\r\n        this.degree -= 0.5;\r\n    },\r\n\r\n\r\n\r\n});\r\n","﻿\r\n\r\nconst Gobject = require(\"./Gobject\");\r\n\r\nvar ObjectLaiser = cc.Class({\r\n    extends: Gobject,\r\n\r\n    properties: {\r\n        number: 0,\r\n    },\r\n\r\n    Init: function(TAG, num){\r\n        this._super(TAG);\r\n        this.number = num;\r\n    },\r\n\r\n\r\n});\r\n","﻿\r\n\r\nconst Controller = require(\"Controller\");\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 최초 포지션, 포지션 정보가 저장됩니다.\r\n        // replay 해당 포지션으로 초기화 됩니다.\r\n        initPosition: null,\r\n\r\n        // 플레이어가 바라보고 있는 방향입니다.\r\n        direction : Env.DIRECTION_UP,\r\n\r\n        // 말풍선 객체입니다.\r\n        bubble: cc.Node,\r\n        // 말풍선 내부에 있는 텍스트 객체입니다.\r\n        bubbleLabel: cc.Label,\r\n\r\n        // 메시지가 보여지고있는 상태입니다.\r\n        isShowMessage : false,\r\n\r\n        // 죽었음을 표현\r\n        playerIsDead: false,\r\n        playerStatusInfo: 0,\r\n\r\n\r\n        audioFootStep:{\r\n            default : [],\r\n            type: cc.AudioClip,\r\n        },\r\n\r\n        audioStep: 0,\r\n        isPlaySound : false,\r\n\r\n        isBombAnimation : false,\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어가 이동합니다.\r\n     * @param pos 이동될 포지션 값\r\n     * @constructor\r\n     */\r\n    Movement: function(pos){\r\n        this.changeSpriteDirection();\r\n        this.node.setPosition(pos);\r\n\r\n    },\r\n\r\n    PlayFootStep: function(){\r\n        if(this.isPlaySound) return;\r\n\r\n        this.isPlaySound = true;\r\n        var self = this;\r\n        setTimeout(()=>{\r\n            self.isPlaySound = false;\r\n        },300);\r\n\r\n\r\n        var audioClip = this.audioFootStep[this.audioStep]; // 오디오 클립 가져오기\r\n        cc.audioEngine.play(audioClip, false, 1, function () {\r\n            // 오디오가 종료될 때 호출되는 콜백 함수\r\n            // 다음에 재생할 오디오 클립 인덱스 업데이트\r\n            if (this.audioStep === 1)\r\n                this.audioStep = 0;\r\n            else\r\n                this.audioStep = 1;\r\n        }.bind(this));\r\n    },\r\n\r\n    /**\r\n     * 현재 방향에 따른 Scale 변경\r\n     * 로테이션 처리\r\n     */\r\n    changeSpriteDirection: function(){\r\n\r\n        var animationClip = this.getComponent(cc.Animation)\r\n        // RUN 상태\r\n\r\n        var isPlaying = false;\r\n        if(this.playerStatusInfo  < 2){\r\n            this.PlayerInitAnimation();\r\n        }\r\n\r\n        if(this.playerStatusInfo === 1){\r\n            switch (this.direction){\r\n\r\n                case Env.DIRECTION_UP:\r\n                    var upState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_UP);\r\n                    isPlaying = upState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_UP);\r\n                    }\r\n                    break;\r\n                case Env.DIRECTION_DOWN:\r\n                    var downState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_DOWN);\r\n                    isPlaying = downState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_DOWN);\r\n                    }\r\n\r\n                    break;\r\n                case Env.DIRECTION_RIGHT:\r\n                    var rightState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_RIGHT);\r\n                    isPlaying = rightState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_RIGHT);\r\n                    }\r\n                    break;\r\n                case Env.DIRECTION_LEFT:\r\n                    var leftState = this.getComponent(cc.Animation).getAnimationState(Env.ANIMATION_LEFT);\r\n                    isPlaying = leftState.isPlaying;\r\n                    if (!isPlaying) {\r\n                        animationClip.play(Env.ANIMATION_LEFT);\r\n                    }\r\n                    break;\r\n            }\r\n            // 효과음 추가.\r\n            this.PlayFootStep();\r\n        }\r\n        else if(this.playerStatusInfo === 11){\r\n            if(this.isBombAnimation) return;\r\n\r\n            console.log(\"Fc\");\r\n\r\n            this.isBombAnimation = true;\r\n// 폭탄에 맞음\r\n            var animationClip = this.getComponent(cc.Animation);\r\n\r\n            var upState = this.direction === Env.ANIMATION_LEFT ? animationClip.getAnimationState(Env.ANIMATION_LEFT_HIT) : animationClip.getAnimationState(Env.ANIMATION_RIGHT_HIT);\r\n            var isPlaying = upState.isPlaying;\r\n            if (!isPlaying) {\r\n                if (this.direction === Env.ANIMATION_LEFT) {\r\n                    animationClip.play(Env.ANIMATION_LEFT_HIT);\r\n                } else {\r\n                    animationClip.play(Env.ANIMATION_RIGHT_HIT);\r\n                }\r\n            }\r\n\r\n            var self = this;\r\n            setTimeout(function(){\r\n                self.isBombAnimation = false;\r\n            }, 1000);\r\n\r\n        }\r\n        else{\r\n            if(this.playerStatusInfo !== 9){\r\n                // 방향이 왼쪽을 제외하곤 다 오른쪽 보도록\r\n                if(this.direction === Env.DIRECTION_LEFT){\r\n                    // idle_left 애니메이션 적용 예정\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_LEFT);\r\n                }\r\n                else if(this.direction === Env.DIRECTION_RIGHT){\r\n                    // idle_right 애니메이션 적용 예정\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_RIGHT);\r\n                }\r\n                else if(this.direction === Env.DIRECTION_UP){\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_UP);\r\n\r\n                }\r\n                else if(this.direction === Env.DIRECTION_DOWN){\r\n                    this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_DOWN);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    /**\r\n     * 플레이어 객체가 생성되면 최초로 해당 함수를 불러 초기화 해야합니다.\r\n     * @param v2  최초 포지션 인덱스를 가지고 옵니다.\r\n     * @param DIR  최초 플레이어가 바라보고 있는 방향\r\n     */\r\n    Init: function(v2 , DIR){\r\n        this.initPosition = v2;\r\n        this.node.setPosition(v2);\r\n        this._HideBubble();\r\n        this.PlayerInitAnimation();\r\n\r\n        this.node.zIndex = cc.macro.MAX_ZINDEX - 1;\r\n\r\n        var defaultDIR = 0;\r\n        switch (DIR){\r\n            case Env.DIRECTION_LEFT: defaultDIR = Env.PLAYER_DEFAULT_LEFT; break;\r\n            case Env.DIRECTION_RIGHT: defaultDIR = Env.PLAYER_DEFAULT_RIGHT; break;\r\n            case Env.DIRECTION_UP: defaultDIR = Env.PLAYER_DEFAULT_UP; break;\r\n            case Env.DIRECTION_DOWN: defaultDIR = Env.PLAYER_DEFAULT_DOWN; break;\r\n        }\r\n\r\n\r\n        if(defaultDIR === Env.PLAYER_DEFAULT_LEFT){\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_LEFT);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_UP){\r\n            // 위로 보고있을때\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_UP);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_DOWN){\r\n            // 아래보고있을때.\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_DOWN);\r\n        }\r\n        else if(defaultDIR === Env.PLAYER_DEFAULT_RIGHT){\r\n            this.getComponent(cc.Animation).play(Env.ANIMATION_IDLE_RIGHT);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 플레이어 정보를 초기화 하는 함수입니다.\r\n     */\r\n    playerInit : function(){\r\n        this.node.setPosition(this.initPosition);\r\n        this.direction = Env.DIRECTION_RIGHT;\r\n        this.changeSpriteDirection();\r\n    },\r\n\r\n    /**\r\n     * 플레이어 바라보고 있는 방향을 설정합니다.\r\n     * @param dir 플레이어가 바라보는 방향정보\r\n     */\r\n    setDirection : function(dir){\r\n        this.direction = dir;\r\n    },\r\n\r\n    /**\r\n     * 플레이어 상태값을 입력받아\r\n     * 말풍선, 죽음, 플레이어상태 표현 출력\r\n     * @param status\r\n     */\r\n    setPlayerStatus: function(status){\r\n\r\n        this.playerStatusInfo = status;\r\n        if(this.playerStatusInfo < 2 ) return;\r\n\r\n\r\n        switch (status) {\r\n            case 9:\r\n                // 플레이어 죽음.\r\n                this.PlayerDealAnimation();\r\n                break;\r\n            case 10:\r\n                // 해당방향으로 이동하지못함.\r\n                this.ShowMessage(\"이 방향으로 이동할수 없어!\");\r\n                break;\r\n//             case 11:\r\n//\r\n//                 if(this.isBombAnimation) return;\r\n//\r\n//                 console.log(\"Fc\");\r\n//\r\n//                 this.isBombAnimation = true;\r\n// // 폭탄에 맞음\r\n//                 var animationClip = this.getComponent(cc.Animation);\r\n//\r\n//                 var upState = this.direction === Env.ANIMATION_LEFT ? animationClip.getAnimationState(Env.ANIMATION_LEFT_HIT) : animationClip.getAnimationState(Env.ANIMATION_RIGHT_HIT);\r\n//                 var isPlaying = upState.isPlaying;\r\n//                 if (!isPlaying) {\r\n//                     if (this.direction === Env.ANIMATION_LEFT) {\r\n//                         animationClip.play(Env.ANIMATION_LEFT_HIT);\r\n//                     } else {\r\n//                         animationClip.play(Env.ANIMATION_RIGHT_HIT);\r\n//                     }\r\n//                 }\r\n//\r\n//                 var self = this;\r\n//                 setTimeout(function(){\r\n//                     self.isBombAnimation = false;\r\n//                 }, 1000);\r\n//\r\n//\r\n//                 break;\r\n\r\n            case 13:\r\n                // Set 명령어 시도중 방향이 다를경우\r\n                this.ShowMessage(\"이곳에서 할수 없는 명령어야!\");\r\n                break;\r\n            case 14:\r\n                this.ShowMessage(\"문자열이 잘못 입력되었어.\");\r\n                break;\r\n\r\n            case 15:\r\n                this.ShowMessage(\"고체추진제 장착!\");\r\n                // 고체추진제\r\n                break;\r\n            case 16:\r\n                // 액체연료\r\n                this.ShowMessage(\"액체연료 장착!\");\r\n                break;\r\n            case 17:\r\n                // 추가엔진\r\n                this.ShowMessage(\"추가 엔진 장착!\");\r\n                break;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * 메시지를 띄워줍니다.\r\n     * ex) 플레이어가 이동불가, 특별한 상태 메시지를 띄워줍니다.\r\n     * @param label 표기될 텍스트\r\n     */\r\n    ShowMessage: function(label){\r\n        if(this.isShowMessage) return;\r\n\r\n\r\n        this.bubbleLabel.string =  label;\r\n        this._ShowBubble();\r\n\r\n        var self = this;\r\n        setTimeout(function(){\r\n            self._HideBubble();\r\n        }, 1000); // 2000 밀리초 = 2초\r\n    },\r\n\r\n    /**\r\n     * 메시지를 감춥니다.\r\n     * @private\r\n     */\r\n    _HideBubble: function(){\r\n        this.isShowMessage = false;\r\n        this.bubble.active = false;\r\n    },\r\n\r\n    /**\r\n     * 메시지를 보여줍니다.\r\n     * @private\r\n     */\r\n    _ShowBubble: function(){\r\n        this.isShowMessage = true;\r\n        this.bubble.active = true;\r\n    },\r\n\r\n    PlayerInitAnimation: function(){\r\n        if(this.playerIsDead === false) return;\r\n        this.playerIsDead = false;\r\n        this.node.opacity = 255;\r\n\r\n    },\r\n\r\n    PlayerDealAnimation: function(){\r\n        if(this.playerIsDead) return;\r\n        this.playerIsDead = true;\r\n\r\n        var self = this;\r\n        var animationClip = this.getComponent(cc.Animation);\r\n        // if (this.direction === Env.ANIMATION_LEFT) {\r\n        //     animationClip.play(Env.ANIMATION_LEFT_HIT);\r\n        // } else {\r\n        //     animationClip.play(Env.ANIMATION_RIGHT_HIT);\r\n        // }\r\n        var pInterval = setInterval(function(e){\r\n            if(self.node.opacity < 1){\r\n                clearInterval(pInterval);\r\n            }\r\n            self.node.opacity -= 10;\r\n        }, 20);\r\n    },\r\n\r\n\r\n\r\n});\r\n","﻿/**\r\n *\r\n * SoundManager 클래스는 SFX 최초로 모두 로드하고\r\n * 필요시 GetSound({Env.TAG}) 이용해 음악정보를 를 가져옵니다.\r\n * @type {Function}\r\n */\r\n\r\n\r\n\r\nvar SoundManager = cc.Class({\r\n    extends: cc.Component,\r\n\r\n\r\n    statics: {\r\n        _instance: null,\r\n        getInstance: function () {\r\n            if (!SoundManager._instance) {\r\n                SoundManager._instance = new SoundManager();\r\n                SoundManager._instance.init();\r\n            }\r\n            return SoundManager._instance;\r\n        },\r\n    },\r\n\r\n\r\n    properties: {\r\n        sound: {\r\n            default: [],\r\n            type: cc.AudioClip,\r\n        },\r\n        isLoadedSFX: false,\r\n    },\r\n\r\n\r\n    init: function(){\r\n        this._LoadSFX();\r\n    },\r\n\r\n\r\n    /**\r\n     * 정상적으로 사운드가 로드되었는지 체크하는 함수입니다.\r\n     *\r\n     * @return {*}\r\n     * @constructor\r\n     */\r\n    IsLoadCheck: function(){\r\n        return this.sound[7];\r\n    },\r\n\r\n    /**\r\n     * SFX를 출력해주는 함수입니다.\r\n     * @param TAG Env 내부 SFX_로 시작하는 태그들중 하나\r\n     * @constructor\r\n     */\r\n    PlaySfx: function(TAG){\r\n\r\n        if(TAG > this.sound.length ) {\r\n            console.log(\"SFX Load ERROR\");\r\n            return;\r\n        }\r\n\r\n        if(this.sound[TAG] === null) {\r\n            console.log(\"SFX NULL ERROR \");\r\n            return;\r\n        }\r\n\r\n\r\n        console.log(\"playSFX ==> \" ,TAG);\r\n\r\n        var self = this;\r\n\r\n        var clip = this.sound[TAG];\r\n        cc.audioEngine.play(clip,false, 1, function(){\r\n            console.log(\"Done\");\r\n        }.bind(this));\r\n    },\r\n\r\n    /**\r\n     * 내부 함수로 SFX를 모두 loadRes로 로드 합니다.\r\n     * @private\r\n     */\r\n    _LoadSFX: function(){\r\n        if(this.isLoadedSFX) return;\r\n\r\n        this.sound = new Array(8).fill(null);\r\n\r\n        var self = this;\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_DROP_SWITCH, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[0] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_SWITCH, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[1] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_EXPLOSION, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[2] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_EARN, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[3] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_DROP_ITEM, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[4] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_ON, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[5] = clip;\r\n            }\r\n        });\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_LASER_OFF, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[6] = clip;\r\n            }\r\n        });\r\n\r\n        cc.loader.loadRes(Env.SFX_DIRECTORY_PATH + Env.SFX_FILENAME_PARTS_DOCKING, cc.AudioClip, function (err, clip) {\r\n            if (err) {\r\n                cc.error(\"Error loading image: \" + err);\r\n            } else {\r\n                self.sound[7] = clip;\r\n            }\r\n        });\r\n\r\n\r\n    },\r\n\r\n});\r\n\r\n"],"file":"project.js"}